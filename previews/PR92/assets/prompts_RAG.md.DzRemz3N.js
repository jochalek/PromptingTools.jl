import { _ as _export_sfc, c as createElementBlock, m as createBaseVNode, t as toDisplayString, a7 as createStaticVNode, o as openBlock } from "./chunks/framework.BqhW5vgI.js";
const __pageData = JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"prompts/RAG.md","filePath":"prompts/RAG.md","lastUpdated":null}');
const _sfc_main = { name: "prompts/RAG.md" };
const _hoisted_1 = /* @__PURE__ */ createStaticVNode('<p>The following file is auto-generated from the <code>templates</code> folder. For any changes, please modify the source files in the <code>templates</code> folder.</p><p>To use these templates in <code>aigenerate</code>, simply provide the template name as a symbol, eg, <code>aigenerate(:MyTemplate; placeholder1 = value1)</code></p><h2 id="rag-templates-rag-templates" tabindex="-1">Rag Templates {#Rag-Templates} <a class="header-anchor" href="#rag-templates-rag-templates" aria-label="Permalink to &quot;Rag Templates {#Rag-Templates}&quot;">​</a></h2><h3 id="template-raganswerfromcontext-template-raganswerfromcontext" tabindex="-1">Template: RAGAnswerFromContext {#Template:-RAGAnswerFromContext} <a class="header-anchor" href="#template-raganswerfromcontext-template-raganswerfromcontext" aria-label="Permalink to &quot;Template: RAGAnswerFromContext {#Template:-RAGAnswerFromContext}&quot;">​</a></h3><ul><li><p>Description: For RAG applications. Answers the provided Questions based on the Context. Placeholders: <code>question</code>, <code>context</code></p></li><li><p>Placeholders: <code>context</code>, <code>question</code></p></li><li><p>Word count: 375</p></li><li><p>Source:</p></li><li><p>Version: 1.0</p></li></ul><p><strong>System Prompt:</strong></p><blockquote><p>Act as a world-class AI assistant with access to the latest knowledge via Context Information.</p><p><strong>Instructions:</strong></p><ul><li><p>Answer the question based only on the provided Context.</p></li><li><p>If you don&#39;t know the answer, just say that you don&#39;t know, don&#39;t try to make up an answer.</p></li><li><p>Be brief and concise.</p></li></ul><p>MarkdownAST.Heading(2)</p><p>MarkdownAST.Heading(2)</p></blockquote><p><strong>User Prompt:</strong></p>', 8);
const _hoisted_9 = /* @__PURE__ */ createBaseVNode("p", null, "MarkdownAST.Heading(1)", -1);
const _hoisted_10 = /* @__PURE__ */ createBaseVNode("p", null, "MarkdownAST.Heading(1)", -1);
const _hoisted_11 = /* @__PURE__ */ createStaticVNode('<h3 id="template-ragcreateqafromcontext-template-ragcreateqafromcontext" tabindex="-1">Template: RAGCreateQAFromContext {#Template:-RAGCreateQAFromContext} <a class="header-anchor" href="#template-ragcreateqafromcontext-template-ragcreateqafromcontext" aria-label="Permalink to &quot;Template: RAGCreateQAFromContext {#Template:-RAGCreateQAFromContext}&quot;">​</a></h3><ul><li><p>Description: For RAG applications. Generate Question and Answer from the provided Context. If you don&#39;t have any special instructions, provide <code>instructions=&quot;None.&quot;</code>. Placeholders: <code>context</code>, <code>instructions</code></p></li><li><p>Placeholders: <code>context</code>, <code>instructions</code></p></li><li><p>Word count: 1396</p></li><li><p>Source:</p></li><li><p>Version: 1.1</p></li></ul><p><strong>System Prompt:</strong></p><blockquote><p>You are a world-class teacher preparing contextual Question &amp; Answer sets for evaluating AI systems.</p><p><strong>Instructions for Question Generation:</strong></p><ol><li><p>Analyze the provided Context chunk thoroughly.</p></li><li><p>Formulate a question that:</p></li></ol><ul><li><p>Is specific and directly related to the information in the context chunk.</p></li><li><p>Is not too short or generic; it should require a detailed understanding of the context to answer.</p></li><li><p>Can only be answered using the information from the provided context, without needing external information.</p></li></ul><p><strong>Instructions for Reference Answer Creation:</strong></p><ol><li>Based on the generated question, compose a reference answer that:</li></ol><ul><li><p>Directly and comprehensively answers the question.</p></li><li><p>Stays strictly within the bounds of the provided context chunk.</p></li><li><p>Is clear, concise, and to the point, avoiding unnecessary elaboration or repetition.</p></li></ul><p><strong>Example 1:</strong></p><ul><li><p>Context Chunk: &quot;In 1928, Alexander Fleming discovered penicillin, which marked the beginning of modern antibiotics.&quot;</p></li><li><p>Generated Question: &quot;What was the significant discovery made by Alexander Fleming in 1928 and its impact?&quot;</p></li><li><p>Reference Answer: &quot;Alexander Fleming discovered penicillin in 1928, which led to the development of modern antibiotics.&quot;</p></li></ul><p>If the user provides special instructions, prioritize these over the general instructions.</p></blockquote><p><strong>User Prompt:</strong></p>', 5);
const _hoisted_16 = /* @__PURE__ */ createBaseVNode("p", null, "MarkdownAST.Heading(1)", -1);
const _hoisted_17 = /* @__PURE__ */ createBaseVNode("hr", null, null, -1);
const _hoisted_18 = /* @__PURE__ */ createBaseVNode("p", null, "MarkdownAST.Heading(2)", -1);
const _hoisted_19 = /* @__PURE__ */ createBaseVNode("p", null, "MarkdownAST.Heading(1)", -1);
const _hoisted_20 = /* @__PURE__ */ createStaticVNode('<h3 id="template-ragextractmetadatalong-template-ragextractmetadatalong" tabindex="-1">Template: RAGExtractMetadataLong {#Template:-RAGExtractMetadataLong} <a class="header-anchor" href="#template-ragextractmetadatalong-template-ragextractmetadatalong" aria-label="Permalink to &quot;Template: RAGExtractMetadataLong {#Template:-RAGExtractMetadataLong}&quot;">​</a></h3><ul><li><p>Description: For RAG applications. Extracts metadata from the provided text using longer instructions set and examples. If you don&#39;t have any special instructions, provide <code>instructions=&quot;None.&quot;</code>. Placeholders: <code>text</code>, <code>instructions</code></p></li><li><p>Placeholders: <code>text</code>, <code>instructions</code></p></li><li><p>Word count: 1384</p></li><li><p>Source:</p></li><li><p>Version: 1.1</p></li></ul><p><strong>System Prompt:</strong></p><blockquote><p>You&#39;re a world-class data extraction engine built by OpenAI together with Google and to extract filter metadata to power the most advanced search engine in the world.</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>**Instructions for Extraction:**</span></span>\n<span class="line"><span>1. Carefully read through the provided Text</span></span>\n<span class="line"><span>2. Identify and extract:</span></span>\n<span class="line"><span>   - All relevant entities such as names, places, dates, etc.</span></span>\n<span class="line"><span>   - Any special items like technical terms, unique identifiers, etc.</span></span>\n<span class="line"><span>   - In the case of Julia code or Julia documentation: specifically extract package names, struct names, function names, and important variable names (eg, uppercased variables)</span></span>\n<span class="line"><span>3. Keep extracted values and categories short. Maximum 2-3 words!</span></span>\n<span class="line"><span>4. You can only extract 3-5 items per Text, so select the most important ones.</span></span>\n<span class="line"><span>5. Assign a search filter Category to each extracted Value</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>**Example 1:**</span></span>\n<span class="line"><span>- Document Chunk: &quot;Dr. Jane Smith published her findings on neuroplasticity in 2021. The research heavily utilized the DataFrames.jl and Plots.jl packages.&quot;</span></span>\n<span class="line"><span>- Extracted keywords:</span></span>\n<span class="line"><span>  - Name: Dr. Jane Smith</span></span>\n<span class="line"><span>  - Date: 2021</span></span>\n<span class="line"><span>  - Technical Term: neuroplasticity</span></span>\n<span class="line"><span>  - JuliaPackage: DataFrames.jl, Plots.jl</span></span>\n<span class="line"><span>  - JuliaLanguage:</span></span>\n<span class="line"><span>  - Identifier:</span></span>\n<span class="line"><span>  - Other: </span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>If the user provides special instructions, prioritize these over the general instructions.</span></span></code></pre></div></blockquote><p><strong>User Prompt:</strong></p>', 5);
const _hoisted_25 = /* @__PURE__ */ createBaseVNode("p", null, "MarkdownAST.Heading(1)", -1);
const _hoisted_26 = /* @__PURE__ */ createBaseVNode("p", null, "MarkdownAST.Heading(1)", -1);
const _hoisted_27 = /* @__PURE__ */ createStaticVNode('<h3 id="template-ragextractmetadatashort-template-ragextractmetadatashort" tabindex="-1">Template: RAGExtractMetadataShort {#Template:-RAGExtractMetadataShort} <a class="header-anchor" href="#template-ragextractmetadatashort-template-ragextractmetadatashort" aria-label="Permalink to &quot;Template: RAGExtractMetadataShort {#Template:-RAGExtractMetadataShort}&quot;">​</a></h3><ul><li><p>Description: For RAG applications. Extracts metadata from the provided text. If you don&#39;t have any special instructions, provide <code>instructions=&quot;None.&quot;</code>. Placeholders: <code>text</code>, <code>instructions</code></p></li><li><p>Placeholders: <code>text</code>, <code>instructions</code></p></li><li><p>Word count: 278</p></li><li><p>Source:</p></li><li><p>Version: 1.0</p></li></ul><p><strong>System Prompt:</strong></p><blockquote><p>Extract search keywords and their categories from the Text provided below (format &quot;value:category&quot;). Each keyword must be at most 2-3 words. Provide at most 3-5 keywords. I will tip you 50 if the search is successful.</p></blockquote><p><strong>User Prompt:</strong></p>', 5);
const _hoisted_32 = /* @__PURE__ */ createBaseVNode("p", null, "MarkdownAST.Heading(1)", -1);
const _hoisted_33 = /* @__PURE__ */ createBaseVNode("p", null, "MarkdownAST.Heading(1)", -1);
const _hoisted_34 = /* @__PURE__ */ createStaticVNode('<h3 id="template-ragjudgeanswerfromcontext-template-ragjudgeanswerfromcontext" tabindex="-1">Template: RAGJudgeAnswerFromContext {#Template:-RAGJudgeAnswerFromContext} <a class="header-anchor" href="#template-ragjudgeanswerfromcontext-template-ragjudgeanswerfromcontext" aria-label="Permalink to &quot;Template: RAGJudgeAnswerFromContext {#Template:-RAGJudgeAnswerFromContext}&quot;">​</a></h3><ul><li><p>Description: For RAG applications. Judge an answer to a question on a scale from 1-5. Placeholders: <code>question</code>, <code>context</code>, <code>answer</code></p></li><li><p>Placeholders: <code>question</code>, <code>context</code>, <code>answer</code></p></li><li><p>Word count: 1415</p></li><li><p>Source:</p></li><li><p>Version: 1.1</p></li></ul><p><strong>System Prompt:</strong></p><blockquote><p>You&#39;re an impartial judge. Your task is to evaluate the quality of the Answer provided by an AI assistant in response to the User Question on a scale from 1 to 5.</p><ol><li><strong>Scoring Criteria:</strong></li></ol><ul><li><p><strong>Relevance (1-5):</strong> How well does the provided answer align with the context?</p><ul><li><em>1: Not relevant, 5: Highly relevant</em></li></ul></li><li><p><strong>Completeness (1-5):</strong> Does the provided answer cover all the essential points mentioned in the context?</p><ul><li><em>1: Very incomplete, 5: Very complete</em></li></ul></li><li><p><strong>Clarity (1-5):</strong> How clear and understandable is the provided answer?</p><ul><li><em>1: Not clear at all, 5: Extremely clear</em></li></ul></li><li><p><strong>Consistency (1-5):</strong> How consistent is the provided answer with the overall context?</p><ul><li><em>1: Highly inconsistent, 5: Perfectly consistent</em></li></ul></li><li><p><strong>Helpfulness (1-5):</strong> How helpful is the provided answer in answering the user&#39;s question?</p><ul><li><em>1: Not helpful at all, 5: Extremely helpful</em></li></ul></li></ul><ol><li><strong>Judging Instructions:</strong></li></ol><ul><li><p>As an impartial judge, please evaluate the provided answer based on the above criteria.</p></li><li><p>Assign a score from 1 to 5 for each criterion, considering the original context, question and the provided answer.</p></li><li><p>The Final Score is an average of these individual scores, representing the overall quality and relevance of the provided answer. It must be between 1-5.</p></li></ul><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span></span></span></code></pre></div></blockquote><p><strong>User Prompt:</strong></p><blockquote><p>MarkdownAST.Heading(1)</p><hr><p>MarkdownAST.Heading(2)</p><p>MarkdownAST.Heading(1)</p><hr><p>MarkdownAST.Heading(2)</p><p>MarkdownAST.Heading(1)</p><hr><p>MarkdownAST.Heading(2)</p><p>MarkdownAST.Heading(1)</p></blockquote><h3 id="template-ragjudgeanswerfromcontextshort-template-ragjudgeanswerfromcontextshort" tabindex="-1">Template: RAGJudgeAnswerFromContextShort {#Template:-RAGJudgeAnswerFromContextShort} <a class="header-anchor" href="#template-ragjudgeanswerfromcontextshort-template-ragjudgeanswerfromcontextshort" aria-label="Permalink to &quot;Template: RAGJudgeAnswerFromContextShort {#Template:-RAGJudgeAnswerFromContextShort}&quot;">​</a></h3><ul><li><p>Description: For RAG applications. Simple and short prompt to judge answer to a question on a scale from 1-5. Placeholders: <code>question</code>, <code>context</code>, <code>answer</code></p></li><li><p>Placeholders: <code>question</code>, <code>context</code>, <code>answer</code></p></li><li><p>Word count: 420</p></li><li><p>Source:</p></li><li><p>Version: 1.0</p></li></ul><p><strong>System Prompt:</strong></p><blockquote><p>You re an impartial judge. Read carefully the provided question and the answer based on the context. Provide a rating on a scale 1-5 (1=worst quality, 5=best quality) that reflects how relevant, helpful, clear, and consistent with the provided context the answer was. ```</p></blockquote><p><strong>User Prompt:</strong></p><blockquote><p>MarkdownAST.Heading(1)</p><hr><p>MarkdownAST.Heading(2)</p><p>MarkdownAST.Heading(1)</p><hr><p>MarkdownAST.Heading(2)</p><p>MarkdownAST.Heading(1)</p><hr><p>MarkdownAST.Heading(2)</p><p>MarkdownAST.Heading(1)</p></blockquote>', 12);
function _sfc_render(_ctx, _cache, $props, $setup, $data, $options) {
  return openBlock(), createElementBlock("div", null, [
    _hoisted_1,
    createBaseVNode("blockquote", null, [
      _hoisted_9,
      createBaseVNode("p", null, toDisplayString(_ctx.question), 1),
      _hoisted_10
    ]),
    _hoisted_11,
    createBaseVNode("blockquote", null, [
      _hoisted_16,
      _hoisted_17,
      _hoisted_18,
      _hoisted_19,
      createBaseVNode("p", null, toDisplayString(_ctx.instructions), 1)
    ]),
    _hoisted_20,
    createBaseVNode("blockquote", null, [
      _hoisted_25,
      createBaseVNode("p", null, toDisplayString(_ctx.text), 1),
      _hoisted_26,
      createBaseVNode("p", null, toDisplayString(_ctx.instructions), 1)
    ]),
    _hoisted_27,
    createBaseVNode("blockquote", null, [
      _hoisted_32,
      createBaseVNode("p", null, toDisplayString(_ctx.text), 1),
      _hoisted_33,
      createBaseVNode("p", null, toDisplayString(_ctx.instructions), 1)
    ]),
    _hoisted_34
  ]);
}
const RAG = /* @__PURE__ */ _export_sfc(_sfc_main, [["render", _sfc_render]]);
export {
  __pageData,
  RAG as default
};
