import { _ as _export_sfc, c as createElementBlock, o as openBlock, a7 as createStaticVNode } from "./chunks/framework.BqhW5vgI.js";
const __pageData = JSON.parse('{"title":"RAG Tools Introduction","description":"","frontmatter":{},"headers":[],"relativePath":"extra_tools/rag_tools_intro.md","filePath":"extra_tools/rag_tools_intro.md","lastUpdated":null}');
const _sfc_main = { name: "extra_tools/rag_tools_intro.md" };
const _hoisted_1 = /* @__PURE__ */ createStaticVNode('<h1 id="RAG-Tools-Introduction" tabindex="-1">RAG Tools Introduction <a class="header-anchor" href="#RAG-Tools-Introduction" aria-label="Permalink to &quot;RAG Tools Introduction {#RAG-Tools-Introduction}&quot;">​</a></h1><p><code>RAGTools</code> is an experimental module that provides a set of utilities for building Retrieval-Augmented Generation (RAG) applications, ie, applications that generate answers by combining knowledge of the underlying AI model with the information from the user&#39;s knowledge base.</p><p>Import the module as follows:</p><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># required dependencies to load the necessary extensions!!!</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">using</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> LinearAlgebra, SparseArrays </span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">using</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> PromptingTools</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Experimental</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">RAGTools</span></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># to access unexported functionality</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> RT </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> PromptingTools</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Experimental</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">RAGTools</span></span></code></pre></div><h2 id="Highlights" tabindex="-1">Highlights <a class="header-anchor" href="#Highlights" aria-label="Permalink to &quot;Highlights {#Highlights}&quot;">​</a></h2><p>The main functions to be aware of are:</p><ul><li><p><code>build_index</code> to build a RAG index from a list of documents (type <code>ChunkIndex</code>)</p></li><li><p><code>airag</code> to generate answers using the RAG model on top of the <code>index</code> built above</p></li><li><p><code>annotate_support</code> to highlight which parts of the RAG answer are supported by the documents in the index vs which are generated by the model</p></li><li><p><code>build_qa_evals</code> to build a set of question-answer pairs for evaluation of the RAG model from your corpus</p></li></ul><p>See example <code>examples/building_RAG.jl</code> for an end-to-end example of how to use these tools.</p><p>The hope is to provide a modular and easily extensible set of tools for building RAG applications in Julia. Feel free to open an issue or ask in the <code>#generative-ai</code> channel in the JuliaLang Slack if you have a specific need.</p><h2 id="References" tabindex="-1">References <a class="header-anchor" href="#References" aria-label="Permalink to &quot;References {#References}&quot;">​</a></h2><div style="border-width:1px;border-style:solid;border-color:black;padding:1em;border-radius:25px;"><a id="PromptingTools.Experimental.RAGTools.build_index-extra_tools-rag_tools_intro" href="#PromptingTools.Experimental.RAGTools.build_index-extra_tools-rag_tools_intro">#</a> <b><u>PromptingTools.Experimental.RAGTools.build_index</u></b> — <i>Function</i>. <p>Build an index for RAG (Retriever-Augmented Generation) applications. REQUIRES SparseArrays and LinearAlgebra packages to be loaded!!</p><p><a href="https://github.com/svilupp/PromptingTools.jl/blob/3597233dbeb2b96828639b6efdfd51cabac275cb/src/Experimental/RAGTools/preparation.jl#L34" target="_blank" rel="noreferrer">source</a></p></div><br><div style="border-width:1px;border-style:solid;border-color:black;padding:1em;border-radius:25px;"><a id="PromptingTools.Experimental.RAGTools.airag-extra_tools-rag_tools_intro" href="#PromptingTools.Experimental.RAGTools.airag-extra_tools-rag_tools_intro">#</a> <b><u>PromptingTools.Experimental.RAGTools.airag</u></b> — <i>Function</i>. <div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">airag</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(index</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">AbstractChunkIndex</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, rag_template</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Symbol</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> :RAGAnswerFromContext</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    question</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">AbstractString</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    top_k</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Int</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 100</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, top_n</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Int</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, minimum_similarity</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">AbstractFloat</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> -</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1.0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    tag_filter</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Union{Symbol, Vector{String}, Regex, Nothing}</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> :auto</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    rerank_strategy</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">RerankingStrategy</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> Passthrough</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(),</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    model_embedding</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">String</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> PT</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">MODEL_EMBEDDING, model_chat</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">String</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> PT</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">MODEL_CHAT,</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    model_metadata</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">String</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> PT</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">MODEL_CHAT,</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    metadata_template</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Symbol</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> :RAGExtractMetadataShort</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    chunks_window_margin</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Tuple{Int, Int}</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">),</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    return_details</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Bool</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> false</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, verbose</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Bool</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    rerank_kwargs</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">NamedTuple</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> NamedTuple</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(),</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    api_kwargs</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">NamedTuple</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> NamedTuple</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(),</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    aiembed_kwargs</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">NamedTuple</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> NamedTuple</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(),</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    aigenerate_kwargs</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">NamedTuple</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> NamedTuple</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(),</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    aiextract_kwargs</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">NamedTuple</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> NamedTuple</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(),</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    kwargs</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">...</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Generates a response for a given question using a Retrieval-Augmented Generation (RAG) approach.</p><p>The function selects relevant chunks from an <code>ChunkIndex</code>, optionally filters them based on metadata tags, reranks them, and then uses these chunks to construct a context for generating a response.</p><p><strong>Arguments</strong></p><ul><li><p><code>index::AbstractChunkIndex</code>: The chunk index to search for relevant text.</p></li><li><p><code>rag_template::Symbol</code>: Template for the RAG model, defaults to <code>:RAGAnswerFromContext</code>.</p></li><li><p><code>question::AbstractString</code>: The question to be answered.</p></li><li><p><code>top_k::Int</code>: Number of top candidates to retrieve based on embedding similarity.</p></li><li><p><code>top_n::Int</code>: Number of candidates to return after reranking.</p></li><li><p><code>minimum_similarity::AbstractFloat</code>: Minimum similarity threshold (between -1 and 1) for filtering chunks based on embedding similarity. Defaults to -1.0.</p></li><li><p><code>tag_filter::Union{Symbol, Vector{String}, Regex}</code>: Mechanism for filtering chunks based on tags (either automatically detected, specific tags, or a regex pattern). Disabled by setting to <code>nothing</code>.</p></li><li><p><code>rerank_strategy::RerankingStrategy</code>: Strategy for reranking the retrieved chunks. Defaults to <code>Passthrough()</code>. Use <code>CohereRerank</code> for better results (requires <code>COHERE_API_KEY</code> to be set)</p></li><li><p><code>model_embedding::String</code>: Model used for embedding the question, default is <code>PT.MODEL_EMBEDDING</code>.</p></li><li><p><code>model_chat::String</code>: Model used for generating the final response, default is <code>PT.MODEL_CHAT</code>.</p></li><li><p><code>model_metadata::String</code>: Model used for extracting metadata, default is <code>PT.MODEL_CHAT</code>.</p></li><li><p><code>metadata_template::Symbol</code>: Template for the metadata extraction process from the question, defaults to: <code>:RAGExtractMetadataShort</code></p></li><li><p><code>chunks_window_margin::Tuple{Int,Int}</code>: The window size around each chunk to consider for context building. See <code>?build_context</code> for more information.</p></li><li><p><code>return_details::Bool</code>: If <code>true</code>, returns the details used for RAG along with the response.</p></li><li><p><code>verbose::Bool</code>: If <code>true</code>, enables verbose logging.</p></li><li><p><code>api_kwargs</code>: API parameters that will be forwarded to ALL of the API calls (<code>aiembed</code>, <code>aigenerate</code>, and <code>aiextract</code>).</p></li><li><p><code>aiembed_kwargs</code>: API parameters that will be forwarded to the <code>aiembed</code> call. If you need to provide <code>api_kwargs</code> only to this function, simply add them as a keyword argument, eg, <code>aiembed_kwargs = (; api_kwargs = (; x=1))</code>.</p></li><li><p><code>aigenerate_kwargs</code>: API parameters that will be forwarded to the <code>aigenerate</code> call. If you need to provide <code>api_kwargs</code> only to this function, simply add them as a keyword argument, eg, <code>aigenerate_kwargs = (; api_kwargs = (; temperature=0.3))</code>.</p></li><li><p><code>aiextract_kwargs</code>: API parameters that will be forwarded to the <code>aiextract</code> call for the metadata extraction.</p></li></ul><p><strong>Returns</strong></p><ul><li><p>If <code>return_details</code> is <code>false</code>, returns the generated message (<code>msg</code>).</p></li><li><p>If <code>return_details</code> is <code>true</code>, returns a tuple of the generated message (<code>msg</code>) and the <code>RAGDetails</code> for context (<code>rag_details</code>).</p></li></ul><p><strong>Notes</strong></p><ul><li><p>The function first finds the closest chunks to the question embedding, then optionally filters these based on tags. After that, it reranks the candidates and builds a context for the RAG model.</p></li><li><p>The <code>tag_filter</code> can be used to refine the search. If set to <code>:auto</code>, it attempts to automatically determine relevant tags (if <code>index</code> has them available).</p></li><li><p>The <code>chunks_window_margin</code> allows including surrounding chunks for richer context, considering they are from the same source.</p></li><li><p>The function currently supports only single <code>ChunkIndex</code>.</p></li></ul><p><strong>Examples</strong></p><p>Using <code>airag</code> to get a response for a question:</p><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">index </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> build_index</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">...</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># create an index</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">question </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;How to make a barplot in Makie.jl?&quot;</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">msg </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> airag</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(index, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">:RAGAnswerFromContext</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; question)</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># or simply</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">msg </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> airag</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(index; question)</span></span></code></pre></div><p>To understand the details of the RAG process, use <code>return_details=true</code></p><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">msg, details </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> airag</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(index; question, return_details </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># details is a RAGDetails object with all the internal steps of the `airag` function</span></span></code></pre></div><p>You can also pretty-print <code>details</code> to highlight generated text vs text that is supported by context. It also includes annotations of which context was used for each part of the response (where available).</p><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">PT</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">pprint</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(details)</span></span></code></pre></div><p>See also <code>build_index</code>, <code>build_context</code>, <code>CandidateChunks</code>, <code>find_closest</code>, <code>find_tags</code>, <code>rerank</code>, <code>annotate_support</code></p><p><a href="https://github.com/svilupp/PromptingTools.jl/blob/3597233dbeb2b96828639b6efdfd51cabac275cb/src/Experimental/RAGTools/generation.jl#L39-L117" target="_blank" rel="noreferrer">source</a></p></div><br><div style="border-width:1px;border-style:solid;border-color:black;padding:1em;border-radius:25px;"><a id="PromptingTools.Experimental.RAGTools.annotate_support-extra_tools-rag_tools_intro" href="#PromptingTools.Experimental.RAGTools.annotate_support-extra_tools-rag_tools_intro">#</a> <b><u>PromptingTools.Experimental.RAGTools.annotate_support</u></b> — <i>Function</i>. <div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">annotate_support</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(annotater</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">TrigramAnnotater</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, answer</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">AbstractString</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    context</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">AbstractVector</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; min_score</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Float64</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0.5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    skip_trigrams</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Bool</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, hashed</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Bool</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    sources</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Union{Nothing, AbstractVector{&lt;:AbstractString}}</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> nothing</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    min_source_score</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Float64</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0.25</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    add_sources</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Bool</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    add_scores</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Bool</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, kwargs</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">...</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Annotates the <code>answer</code> with the overlap/what&#39;s supported in <code>context</code> and returns the annotated tree of nodes representing the <code>answer</code></p><p>Returns a &quot;root&quot; node with children nodes representing the sentences/code blocks in the <code>answer</code>. Only the &quot;leaf&quot; nodes are to be printed (to avoid duplication), &quot;leaf&quot; nodes are those with NO children.</p><p>Default logic:</p><ul><li><p>Split into sentences/code blocks, then into tokens (~words).</p></li><li><p>Then match each token (~word) exactly.</p></li><li><p>If no exact match found, count trigram-based match (include the surrounding tokens for better contextual awareness).</p></li><li><p>If the match is higher than <code>min_score</code>, it&#39;s recorded in the <code>score</code> of the node.</p></li></ul><p><strong>Arguments</strong></p><ul><li><p><code>annotater::TrigramAnnotater</code>: Annotater to use</p></li><li><p><code>answer::AbstractString</code>: Text to annotate</p></li><li><p><code>context::AbstractVector</code>: Context to annotate against, ie, look for &quot;support&quot; in the texts in <code>context</code></p></li><li><p><code>min_score::Float64</code>: Minimum score to consider a match. Default: 0.5, which means that half of the trigrams of each word should match</p></li><li><p><code>skip_trigrams::Bool</code>: Whether to potentially skip trigram matching if exact full match is found. Default: true</p></li><li><p><code>hashed::Bool</code>: Whether to use hashed trigrams. It&#39;s harder to debug, but it&#39;s much faster for larger texts (hashed text are held in a Set to deduplicate). Default: true</p></li><li><p><code>sources::Union{Nothing, AbstractVector{&lt;:AbstractString}}</code>: Sources to add at the end of the context. Default: nothing</p></li><li><p><code>min_source_score::Float64</code>: Minimum score to consider/to display a source. Default: 0.25, which means that at least a quarter of the trigrams of each word should match to some context. The threshold is lower than <code>min_score</code>, because it&#39;s average across ALL words in a block, so it&#39;s much harder to match fully with generated text.</p></li><li><p><code>add_sources::Bool</code>: Whether to add sources at the end of each code block/sentence. Sources are addded in the square brackets like &quot;[1]&quot;. Default: true</p></li><li><p><code>add_scores::Bool</code>: Whether to add source-matching scores at the end of each code block/sentence. Scores are added in the square brackets like &quot;[0.75]&quot;. Default: true</p></li><li><p>kwargs: Additional keyword arguments to pass to <code>trigram_support!</code> and <code>set_node_style!</code>. See their documentation for more details (eg, customize the colors of the nodes based on the score)</p></li></ul><p><strong>Example</strong></p><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">annotater </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> TrigramAnnotater</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">context </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [</span></span>\n<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &quot;This is a test context.&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Another context sentence.&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Final piece of context.&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">answer </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;This is a test context. Another context sentence.&quot;</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">annotated_root </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> annotate_support</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(annotater, answer, context)</span></span>\n<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">pprint</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(annotated_root) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># pretty print the annotated tree</span></span></code></pre></div><p><a href="https://github.com/svilupp/PromptingTools.jl/blob/3597233dbeb2b96828639b6efdfd51cabac275cb/src/Experimental/RAGTools/annotation.jl#L393-L436" target="_blank" rel="noreferrer">source</a></p></div><br><div style="border-width:1px;border-style:solid;border-color:black;padding:1em;border-radius:25px;"><a id="PromptingTools.Experimental.RAGTools.build_qa_evals-extra_tools-rag_tools_intro" href="#PromptingTools.Experimental.RAGTools.build_qa_evals-extra_tools-rag_tools_intro">#</a> <b><u>PromptingTools.Experimental.RAGTools.build_qa_evals</u></b> — <i>Function</i>. <div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">build_qa_evals</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(doc_chunks</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Vector{&lt;:AbstractString}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, sources</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Vector{&lt;:AbstractString}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">               model</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">PT</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">MODEL_CHAT, instructions</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;None.&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, qa_template</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Symbol</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">:RAGCreateQAFromContext</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">               verbose</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Bool</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, api_kwargs</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">NamedTuple</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> NamedTuple</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(), kwargs</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">...</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Vector{QAEvalItem}</span></span></code></pre></div><p>Create a collection of question and answer evaluations (<code>QAEvalItem</code>) from document chunks and sources. This function generates Q&amp;A pairs based on the provided document chunks, using a specified AI model and template.</p><p><strong>Arguments</strong></p><ul><li><p><code>doc_chunks::Vector{&lt;:AbstractString}</code>: A vector of document chunks, each representing a segment of text.</p></li><li><p><code>sources::Vector{&lt;:AbstractString}</code>: A vector of source identifiers corresponding to each chunk in <code>doc_chunks</code> (eg, filenames or paths).</p></li><li><p><code>model</code>: The AI model used for generating Q&amp;A pairs. Default is <code>PT.MODEL_CHAT</code>.</p></li><li><p><code>instructions::String</code>: Additional instructions or context to provide to the model generating QA sets. Defaults to &quot;None.&quot;.</p></li><li><p><code>qa_template::Symbol</code>: A template symbol that dictates the AITemplate that will be used. It must have placeholder <code>context</code>. Default is <code>:CreateQAFromContext</code>.</p></li><li><p><code>api_kwargs::NamedTuple</code>: Parameters that will be forwarded to the API endpoint.</p></li><li><p><code>verbose::Bool</code>: If <code>true</code>, additional information like costs will be logged. Defaults to <code>true</code>.</p></li></ul><p><strong>Returns</strong></p><p><code>Vector{QAEvalItem}</code>: A vector of <code>QAEvalItem</code> structs, each containing a source, context, question, and answer. Invalid or empty items are filtered out.</p><p><strong>Notes</strong></p><ul><li><p>The function internally uses <code>aiextract</code> to generate Q&amp;A pairs based on the provided <code>qa_template</code>. So you can use any kwargs that you want.</p></li><li><p>Each <code>QAEvalItem</code> includes the context (document chunk), the generated question and answer, and the source.</p></li><li><p>The function tracks and reports the cost of AI calls if <code>verbose</code> is enabled.</p></li><li><p>Items where the question, answer, or context is empty are considered invalid and are filtered out.</p></li></ul><p><strong>Examples</strong></p><p>Creating Q&amp;A evaluations from a set of document chunks:</p><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">doc_chunks </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Text from document 1&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Text from document 2&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">sources </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;source1&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;source2&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">qa_evals </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> build_qa_evals</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(doc_chunks, sources)</span></span></code></pre></div><p><a href="https://github.com/svilupp/PromptingTools.jl/blob/3597233dbeb2b96828639b6efdfd51cabac275cb/src/Experimental/RAGTools/evaluation.jl#L65-L100" target="_blank" rel="noreferrer">source</a></p></div><br>', 18);
const _hoisted_19 = [
  _hoisted_1
];
function _sfc_render(_ctx, _cache, $props, $setup, $data, $options) {
  return openBlock(), createElementBlock("div", null, _hoisted_19);
}
const rag_tools_intro = /* @__PURE__ */ _export_sfc(_sfc_main, [["render", _sfc_render]]);
export {
  __pageData,
  rag_tools_intro as default
};
