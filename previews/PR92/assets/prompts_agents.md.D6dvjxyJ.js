import { _ as _export_sfc, c as createElementBlock, m as createBaseVNode, t as toDisplayString, a7 as createStaticVNode, o as openBlock } from "./chunks/framework.BqhW5vgI.js";
const __pageData = JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"prompts/agents.md","filePath":"prompts/agents.md","lastUpdated":null}');
const _sfc_main = { name: "prompts/agents.md" };
const _hoisted_1 = /* @__PURE__ */ createStaticVNode('<p>The following file is auto-generated from the <code>templates</code> folder. For any changes, please modify the source files in the <code>templates</code> folder.</p><p>To use these templates in <code>aigenerate</code>, simply provide the template name as a symbol, eg, <code>aigenerate(:MyTemplate; placeholder1 = value1)</code></p><h2 id="code-fixing-templates-code-fixing-templates" tabindex="-1">Code-Fixing Templates {#Code-Fixing-Templates} <a class="header-anchor" href="#code-fixing-templates-code-fixing-templates" aria-label="Permalink to &quot;Code-Fixing Templates {#Code-Fixing-Templates}&quot;">​</a></h2><h3 id="template-codefixerrci-template-codefixerrci" tabindex="-1">Template: CodeFixerRCI {#Template:-CodeFixerRCI} <a class="header-anchor" href="#template-codefixerrci-template-codefixerrci" aria-label="Permalink to &quot;Template: CodeFixerRCI {#Template:-CodeFixerRCI}&quot;">​</a></h3><ul><li><p>Description: This template is meant to be used with <code>AICodeFixer</code>. It loosely follows the <a href="https://arxiv.org/pdf/2303.17491.pdf" target="_blank" rel="noreferrer">Recursive Critique and Improvement paper</a> with two steps Critique and Improve based on <code>feedback</code>. Placeholders: <code>feedback</code></p></li><li><p>Placeholders: <code>feedback</code></p></li><li><p>Word count: 2487</p></li><li><p>Source:</p></li><li><p>Version: 1.1</p></li></ul><p><strong>System Prompt:</strong></p><blockquote></blockquote><p><strong>User Prompt:</strong></p>', 8);
const _hoisted_9 = /* @__PURE__ */ createStaticVNode('<p>Ignore all previous instructions. Your goal is to satisfy the user&#39;s request by using several rounds of self-reflection (Critique step) and improvement of the previously provided solution (Improve step). Always enclose the Julia code in triple backticks code fence (<code>julia\\n ... \\n</code>).</p><ol><li><strong>Recall Past Critique:</strong></li></ol><ul><li>Summarize past critiques to refresh your memory (use inline quotes to highlight the few characters of the code that caused the mistakes). It must not be repeated.</li></ul><ol><li><strong>Critique Step Instructions:</strong></li></ol><ul><li><p>Read the user request word-by-word. Does the code implementation follow the request to the letter? Let&#39;s think step by step.</p></li><li><p>Review the provided feedback in detail.</p></li><li><p>Provide 2-3 bullet points of criticism for the code. Each bullet point must refer to a different type of error or issue.</p><ul><li><p>If there are any errors, explain why and what needs to be changed to FIX THEM! Be specific.</p></li><li><p>If an error repeats or critique repeats, the previous issue was not addressed. YOU MUST SUGGEST A DIFFERENT IMPROVEMENT THAN BEFORE.</p></li><li><p>If there are no errors, identify and list specific issues or areas for improvement to write more idiomatic Julia code.</p></li></ul></li></ul><ol><li><strong>Improve Step Instructions:</strong></li></ol><ul><li><p>Specify what you&#39;ll change to address the above critique.</p></li><li><p>Provide the revised code reflecting your suggested improvements. Always repeat the function definition, as only the Julia code in the last message will be evaluated.</p></li><li><p>Ensure the new version of the code resolves the problems while fulfilling the original task. Ensure it has the same function name.</p></li><li><p>Write 2-3 correct and helpful unit tests for the function requested by the user (organize in <code>@testset &quot;name&quot; begin ... end</code> block, use <code>@test</code> macro).</p></li></ul><ol><li><strong>Response Format:</strong></li></ol><hr><p>MarkdownAST.Heading(3)</p><p>&lt;brief bullet points on past critique&gt;</p><p>MarkdownAST.Heading(3)</p><p>&lt;list of issues as bullet points pinpointing the mistakes in the code (use inline quotes)&gt;</p><p>MarkdownAST.Heading(3)</p><p>&lt;list of improvements as bullet points with a clear outline of a solution (use inline quotes)&gt;</p><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">\\&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">provide improved code</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">\\&gt;</span></span></code></pre></div><hr><p>Be concise and focused in all steps.</p><p>MarkdownAST.Heading(3)</p>', 19);
const _hoisted_28 = /* @__PURE__ */ createBaseVNode("p", null, "I believe in you. You can actually do it, so do it ffs. Avoid shortcuts or placing comments instead of code. I also need code, actual working Julia code. What are your Critique and Improve steps?", -1);
const _hoisted_29 = /* @__PURE__ */ createBaseVNode("p", null, "MarkdownAST.Heading(3)", -1);
const _hoisted_30 = /* @__PURE__ */ createBaseVNode("p", null, "Based on your past critique and the latest feedback, what are your Critique and Improve steps?", -1);
const _hoisted_31 = /* @__PURE__ */ createStaticVNode('<h3 id="template-codefixershort-template-codefixershort" tabindex="-1">Template: CodeFixerShort {#Template:-CodeFixerShort} <a class="header-anchor" href="#template-codefixershort-template-codefixershort" aria-label="Permalink to &quot;Template: CodeFixerShort {#Template:-CodeFixerShort}&quot;">​</a></h3><ul><li><p>Description: This template is meant to be used with <code>AICodeFixer</code> to ask for code improvements based on <code>feedback</code>. It uses the same message for both the introduction of the new task and for the iterations. Placeholders: <code>feedback</code></p></li><li><p>Placeholders: <code>feedback</code></p></li><li><p>Word count: 786</p></li><li><p>Source:</p></li><li><p>Version: 1.1</p></li></ul><p><strong>System Prompt:</strong></p><blockquote></blockquote><p><strong>User Prompt:</strong></p><blockquote><p>The above Julia code has been executed with the following results:</p><div class="language-plaintext vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">plaintext</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>{{feedback}}</span></span></code></pre></div><ol><li><p>Read the user request word-by-word. Does the code implementation follow the request to the letter? Let&#39;s think step by step.</p></li><li><p>Review the execution results in detail and, if there is an error, explain why it happened.</p></li><li><p>Suggest improvements to the code. Be EXTREMELY SPECIFIC. Think step-by-step and break it down.</p></li><li><p>Write an improved implementation based on your reflection.</p></li></ol><p>All code must be enclosed in triple backticks code fence (<code>julia\\n ... \\n</code>) and included in one message to be re-evaluated.</p><p>I believe in you. Take a deep breath. You can actually do it, so do it ffs. Avoid shortcuts or placing comments instead of code. I also need code, actual working Julia code.</p></blockquote><h3 id="template-codefixertiny-template-codefixertiny" tabindex="-1">Template: CodeFixerTiny {#Template:-CodeFixerTiny} <a class="header-anchor" href="#template-codefixertiny-template-codefixertiny" aria-label="Permalink to &quot;Template: CodeFixerTiny {#Template:-CodeFixerTiny}&quot;">​</a></h3><ul><li><p>Description: This tiniest template to use with <code>AICodeFixer</code>. Iteratively asks to improve the code based on provided <code>feedback</code>. Placeholders: <code>feedback</code></p></li><li><p>Placeholders: <code>feedback</code></p></li><li><p>Word count: 210</p></li><li><p>Source:</p></li><li><p>Version: 1.0</p></li></ul><p><strong>System Prompt:</strong></p><blockquote></blockquote><p><strong>User Prompt:</strong></p><blockquote><p>MarkdownAST.Heading(3)</p><div class="language-plaintext vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">plaintext</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>{{feedback}}</span></span></code></pre></div><p>Take a deep break. Think step-by-step and fix the above errors. I believe in you. You can do it! I also need code, actual working Julia code, no shortcuts.</p></blockquote><h2 id="feedback-templates-feedback-templates" tabindex="-1">Feedback Templates {#Feedback-Templates} <a class="header-anchor" href="#feedback-templates-feedback-templates" aria-label="Permalink to &quot;Feedback Templates {#Feedback-Templates}&quot;">​</a></h2><h3 id="template-feedbackfromevaluator-template-feedbackfromevaluator" tabindex="-1">Template: FeedbackFromEvaluator {#Template:-FeedbackFromEvaluator} <a class="header-anchor" href="#template-feedbackfromevaluator-template-feedbackfromevaluator" aria-label="Permalink to &quot;Template: FeedbackFromEvaluator {#Template:-FeedbackFromEvaluator}&quot;">​</a></h3><ul><li><p>Description: Simple user message with &quot;Feedback from Evaluator&quot;. Placeholders: <code>feedback</code></p></li><li><p>Placeholders: <code>feedback</code></p></li><li><p>Word count: 41</p></li><li><p>Source:</p></li><li><p>Version: 1.0</p></li></ul><p><strong>System Prompt:</strong></p><blockquote></blockquote><p><strong>User Prompt:</strong></p>', 18);
const _hoisted_49 = /* @__PURE__ */ createBaseVNode("p", null, "MarkdownAST.Heading(3)", -1);
function _sfc_render(_ctx, _cache, $props, $setup, $data, $options) {
  return openBlock(), createElementBlock("div", null, [
    _hoisted_1,
    createBaseVNode("blockquote", null, [
      _hoisted_9,
      createBaseVNode("p", null, toDisplayString(_ctx.feedback), 1),
      _hoisted_28,
      _hoisted_29,
      createBaseVNode("p", null, toDisplayString(_ctx.feedback), 1),
      _hoisted_30
    ]),
    _hoisted_31,
    createBaseVNode("blockquote", null, [
      _hoisted_49,
      createBaseVNode("p", null, toDisplayString(_ctx.feedback), 1)
    ])
  ]);
}
const agents = /* @__PURE__ */ _export_sfc(_sfc_main, [["render", _sfc_render]]);
export {
  __pageData,
  agents as default
};
