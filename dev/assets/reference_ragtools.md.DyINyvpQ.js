import{_ as s,c as i,o as a,a7 as e}from"./chunks/framework.BqXtT0r6.js";const E=JSON.parse('{"title":"Reference for RAGTools","description":"","frontmatter":{},"headers":[],"relativePath":"reference_ragtools.md","filePath":"reference_ragtools.md","lastUpdated":null}'),t={name:"reference_ragtools.md"},n=e(`<h1 id="Reference-for-RAGTools" tabindex="-1">Reference for RAGTools <a class="header-anchor" href="#Reference-for-RAGTools" aria-label="Permalink to &quot;Reference for RAGTools {#Reference-for-RAGTools}&quot;">​</a></h1><ul><li><a href="#PromptingTools.Experimental.RAGTools.AnnotatedNode"><code>PromptingTools.Experimental.RAGTools.AnnotatedNode</code></a></li><li><a href="#PromptingTools.Experimental.RAGTools.ChunkIndex"><code>PromptingTools.Experimental.RAGTools.ChunkIndex</code></a></li><li><a href="#PromptingTools.Experimental.RAGTools.HTMLStyler"><code>PromptingTools.Experimental.RAGTools.HTMLStyler</code></a></li><li><a href="#PromptingTools.Experimental.RAGTools.JudgeAllScores"><code>PromptingTools.Experimental.RAGTools.JudgeAllScores</code></a></li><li><a href="#PromptingTools.Experimental.RAGTools.JudgeRating"><code>PromptingTools.Experimental.RAGTools.JudgeRating</code></a></li><li><a href="#PromptingTools.Experimental.RAGTools.MultiIndex"><code>PromptingTools.Experimental.RAGTools.MultiIndex</code></a></li><li><a href="#PromptingTools.Experimental.RAGTools.RAGDetails"><code>PromptingTools.Experimental.RAGTools.RAGDetails</code></a></li><li><a href="#PromptingTools.Experimental.RAGTools.Styler"><code>PromptingTools.Experimental.RAGTools.Styler</code></a></li><li><a href="#PromptingTools.Experimental.RAGTools.TrigramAnnotater"><code>PromptingTools.Experimental.RAGTools.TrigramAnnotater</code></a></li><li><a href="#PromptingTools.Experimental.RAGTools._normalize"><code>PromptingTools.Experimental.RAGTools._normalize</code></a></li><li><a href="#PromptingTools.Experimental.RAGTools.add_node_metadata!-Tuple{PromptingTools.Experimental.RAGTools.TrigramAnnotater, PromptingTools.Experimental.RAGTools.AnnotatedNode}"><code>PromptingTools.Experimental.RAGTools.add_node_metadata!</code></a></li><li><a href="#PromptingTools.Experimental.RAGTools.airag"><code>PromptingTools.Experimental.RAGTools.airag</code></a></li><li><a href="#PromptingTools.Experimental.RAGTools.align_node_styles!-Tuple{PromptingTools.Experimental.RAGTools.TrigramAnnotater, AbstractVector{&lt;:PromptingTools.Experimental.RAGTools.AnnotatedNode}}"><code>PromptingTools.Experimental.RAGTools.align_node_styles!</code></a></li><li><a href="#PromptingTools.Experimental.RAGTools.annotate_support-Tuple{PromptingTools.Experimental.RAGTools.TrigramAnnotater, AbstractString, AbstractVector}"><code>PromptingTools.Experimental.RAGTools.annotate_support</code></a></li><li><a href="#PromptingTools.Experimental.RAGTools.build_context-Tuple{PromptingTools.Experimental.RAGTools.AbstractChunkIndex, CandidateChunks}"><code>PromptingTools.Experimental.RAGTools.build_context</code></a></li><li><a href="#PromptingTools.Experimental.RAGTools.build_index"><code>PromptingTools.Experimental.RAGTools.build_index</code></a></li><li><a href="#PromptingTools.Experimental.RAGTools.build_index-Tuple{Vector{&lt;:AbstractString}}"><code>PromptingTools.Experimental.RAGTools.build_index</code></a></li><li><a href="#PromptingTools.Experimental.RAGTools.build_qa_evals-Tuple{Vector{&lt;:AbstractString}, Vector{&lt;:AbstractString}}"><code>PromptingTools.Experimental.RAGTools.build_qa_evals</code></a></li><li><a href="#PromptingTools.Experimental.RAGTools.build_tags"><code>PromptingTools.Experimental.RAGTools.build_tags</code></a></li><li><a href="#PromptingTools.Experimental.RAGTools.cohere_api-Tuple{}"><code>PromptingTools.Experimental.RAGTools.cohere_api</code></a></li><li><a href="#PromptingTools.Experimental.RAGTools.find_closest-Tuple{AbstractMatrix{&lt;:Real}, AbstractVector{&lt;:Real}}"><code>PromptingTools.Experimental.RAGTools.find_closest</code></a></li><li><a href="#PromptingTools.Experimental.RAGTools.get_chunks-Tuple{Vector{&lt;:AbstractString}}"><code>PromptingTools.Experimental.RAGTools.get_chunks</code></a></li><li><a href="#PromptingTools.Experimental.RAGTools.get_embeddings-Tuple{Vector{&lt;:AbstractString}}"><code>PromptingTools.Experimental.RAGTools.get_embeddings</code></a></li><li><a href="#PromptingTools.Experimental.RAGTools.get_metadata-Tuple{Vector{&lt;:AbstractString}}"><code>PromptingTools.Experimental.RAGTools.get_metadata</code></a></li><li><a href="#PromptingTools.Experimental.RAGTools.metadata_extract-Tuple{PromptingTools.Experimental.RAGTools.MetadataItem}"><code>PromptingTools.Experimental.RAGTools.metadata_extract</code></a></li><li><a href="#PromptingTools.Experimental.RAGTools.rerank-Tuple{PromptingTools.Experimental.RAGTools.CohereRerank, PromptingTools.Experimental.RAGTools.AbstractChunkIndex, Any, Any}"><code>PromptingTools.Experimental.RAGTools.rerank</code></a></li><li><a href="#PromptingTools.Experimental.RAGTools.run_qa_evals-Tuple{PromptingTools.Experimental.RAGTools.AbstractChunkIndex, AbstractVector{&lt;:PromptingTools.Experimental.RAGTools.QAEvalItem}}"><code>PromptingTools.Experimental.RAGTools.run_qa_evals</code></a></li><li><a href="#PromptingTools.Experimental.RAGTools.run_qa_evals-Tuple{PromptingTools.Experimental.RAGTools.QAEvalItem, PromptingTools.Experimental.RAGTools.RAGDetails}"><code>PromptingTools.Experimental.RAGTools.run_qa_evals</code></a></li><li><a href="#PromptingTools.Experimental.RAGTools.score_retrieval_hit-Tuple{AbstractString, Vector{&lt;:AbstractString}}"><code>PromptingTools.Experimental.RAGTools.score_retrieval_hit</code></a></li><li><a href="#PromptingTools.Experimental.RAGTools.score_retrieval_rank-Tuple{AbstractString, Vector{&lt;:AbstractString}}"><code>PromptingTools.Experimental.RAGTools.score_retrieval_rank</code></a></li><li><a href="#PromptingTools.Experimental.RAGTools.set_node_style!-Tuple{PromptingTools.Experimental.RAGTools.TrigramAnnotater, PromptingTools.Experimental.RAGTools.AnnotatedNode}"><code>PromptingTools.Experimental.RAGTools.set_node_style!</code></a></li><li><a href="#PromptingTools.Experimental.RAGTools.split_into_code_and_sentences-Tuple{Union{SubString{String}, String}}"><code>PromptingTools.Experimental.RAGTools.split_into_code_and_sentences</code></a></li><li><a href="#PromptingTools.Experimental.RAGTools.token_with_boundaries-Tuple{Union{Nothing, AbstractString}, AbstractString, Union{Nothing, AbstractString}}"><code>PromptingTools.Experimental.RAGTools.token_with_boundaries</code></a></li><li><a href="#PromptingTools.Experimental.RAGTools.tokenize-Tuple{Union{SubString{String}, String}}"><code>PromptingTools.Experimental.RAGTools.tokenize</code></a></li><li><a href="#PromptingTools.Experimental.RAGTools.trigram_support!-Union{Tuple{F2}, Tuple{F1}, Tuple{PromptingTools.Experimental.RAGTools.AnnotatedNode, AbstractVector}, Tuple{PromptingTools.Experimental.RAGTools.AnnotatedNode, AbstractVector, F1}, Tuple{PromptingTools.Experimental.RAGTools.AnnotatedNode, AbstractVector, F1, F2}} where {F1&lt;:Function, F2&lt;:Function}"><code>PromptingTools.Experimental.RAGTools.trigram_support!</code></a></li><li><a href="#PromptingTools.Experimental.RAGTools.trigrams-Tuple{AbstractString}"><code>PromptingTools.Experimental.RAGTools.trigrams</code></a></li><li><a href="#PromptingTools.Experimental.RAGTools.trigrams_hashed-Tuple{AbstractString}"><code>PromptingTools.Experimental.RAGTools.trigrams_hashed</code></a></li></ul><div style="border-width:1px;border-style:solid;border-color:black;padding:1em;border-radius:25px;"><a id="PromptingTools.Experimental.RAGTools" href="#PromptingTools.Experimental.RAGTools">#</a> <b><u>PromptingTools.Experimental.RAGTools</u></b> — <i>Module</i>. <div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">RAGTools</span></span></code></pre></div><p>Provides Retrieval-Augmented Generation (RAG) functionality.</p><p>Requires: LinearAlgebra, SparseArrays, PromptingTools for proper functionality.</p><p>This module is experimental and may change at any time. It is intended to be moved to a separate package in the future.</p><p><a href="https://github.com/svilupp/PromptingTools.jl/blob/db7410f2de9c925fe77707c036c0f660b77c876b/src/Experimental/RAGTools/RAGTools.jl#L1-L9" target="_blank" rel="noreferrer">source</a></p></div><br><div style="border-width:1px;border-style:solid;border-color:black;padding:1em;border-radius:25px;"><a id="PromptingTools.Experimental.RAGTools.AnnotatedNode" href="#PromptingTools.Experimental.RAGTools.AnnotatedNode">#</a> <b><u>PromptingTools.Experimental.RAGTools.AnnotatedNode</u></b> — <i>Type</i>. <div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">AnnotatedNode{T}  </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> AbstractAnnotatedNode</span></span></code></pre></div><p>A node to add annotations to the generated answer in <code>airag</code></p><p>Annotations can be: sources, scores, whether its supported or not by the context, etc.</p><p><strong>Fields</strong></p><ul><li><p><code>group_id::Int</code>: Unique identifier for the same group of nodes (eg, different lines of the same code block)</p></li><li><p><code>parent::Union{AnnotatedNode, Nothing}</code>: Parent node that current node was built on</p></li><li><p><code>children::Vector{AnnotatedNode}</code>: Children nodes</p></li><li><p>\`score::</p></li></ul><p><a href="https://github.com/svilupp/PromptingTools.jl/blob/db7410f2de9c925fe77707c036c0f660b77c876b/src/Experimental/RAGTools/annotation.jl#L53-L65" target="_blank" rel="noreferrer">source</a></p></div><br><div style="border-width:1px;border-style:solid;border-color:black;padding:1em;border-radius:25px;"><a id="PromptingTools.Experimental.RAGTools.ChunkIndex" href="#PromptingTools.Experimental.RAGTools.ChunkIndex">#</a> <b><u>PromptingTools.Experimental.RAGTools.ChunkIndex</u></b> — <i>Type</i>. <div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ChunkIndex</span></span></code></pre></div><p>Main struct for storing document chunks and their embeddings. It also stores tags and sources for each chunk.</p><p><strong>Fields</strong></p><ul><li><p><code>id::Symbol</code>: unique identifier of each index (to ensure we&#39;re using the right index with <code>CandidateChunks</code>)</p></li><li><p><code>chunks::Vector{&lt;:AbstractString}</code>: underlying document chunks / snippets</p></li><li><p><code>embeddings::Union{Nothing, Matrix{&lt;:Real}}</code>: for semantic search</p></li><li><p><code>tags::Union{Nothing, AbstractMatrix{&lt;:Bool}}</code>: for exact search, filtering, etc. This is often a sparse matrix indicating which chunks have the given <code>tag</code> (see <code>tag_vocab</code> for the position lookup)</p></li><li><p><code>tags_vocab::Union{Nothing, Vector{&lt;:AbstractString}}</code>: vocabulary for the <code>tags</code> matrix (each column in <code>tags</code> is one item in <code>tags_vocab</code> and rows are the chunks)</p></li><li><p><code>sources::Vector{&lt;:AbstractString}</code>: sources of the chunks</p></li><li><p><code>extras::Union{Nothing, AbstractVector}</code>: additional data, eg, metadata, source code, etc.</p></li></ul><p><a href="https://github.com/svilupp/PromptingTools.jl/blob/db7410f2de9c925fe77707c036c0f660b77c876b/src/Experimental/RAGTools/types.jl#L5-L18" target="_blank" rel="noreferrer">source</a></p></div><br><div style="border-width:1px;border-style:solid;border-color:black;padding:1em;border-radius:25px;"><a id="PromptingTools.Experimental.RAGTools.HTMLStyler" href="#PromptingTools.Experimental.RAGTools.HTMLStyler">#</a> <b><u>PromptingTools.Experimental.RAGTools.HTMLStyler</u></b> — <i>Type</i>. <div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">HTMLStyler</span></span></code></pre></div><p>Defines styling via classes (attribute <code>class</code>) and styles (attribute <code>style</code>) for HTML formatting of <code>AbstractAnnotatedNode</code></p><p><a href="https://github.com/svilupp/PromptingTools.jl/blob/db7410f2de9c925fe77707c036c0f660b77c876b/src/Experimental/RAGTools/annotation.jl#L39-L43" target="_blank" rel="noreferrer">source</a></p></div><br><div style="border-width:1px;border-style:solid;border-color:black;padding:1em;border-radius:25px;"><a id="PromptingTools.Experimental.RAGTools.JudgeAllScores" href="#PromptingTools.Experimental.RAGTools.JudgeAllScores">#</a> <b><u>PromptingTools.Experimental.RAGTools.JudgeAllScores</u></b> — <i>Type</i>. <p><code>final_rating</code> is the average of all scoring criteria. Explain the <code>final_rating</code> in <code>rationale</code></p><p><a href="https://github.com/svilupp/PromptingTools.jl/blob/db7410f2de9c925fe77707c036c0f660b77c876b/src/Experimental/RAGTools/evaluation.jl#L32" target="_blank" rel="noreferrer">source</a></p></div><br><div style="border-width:1px;border-style:solid;border-color:black;padding:1em;border-radius:25px;"><a id="PromptingTools.Experimental.RAGTools.JudgeRating" href="#PromptingTools.Experimental.RAGTools.JudgeRating">#</a> <b><u>PromptingTools.Experimental.RAGTools.JudgeRating</u></b> — <i>Type</i>. <p>Provide the <code>final_rating</code> between 1-5. Provide the rationale for it.</p><p><a href="https://github.com/svilupp/PromptingTools.jl/blob/db7410f2de9c925fe77707c036c0f660b77c876b/src/Experimental/RAGTools/evaluation.jl#L26" target="_blank" rel="noreferrer">source</a></p></div><br><div style="border-width:1px;border-style:solid;border-color:black;padding:1em;border-radius:25px;"><a id="PromptingTools.Experimental.RAGTools.MultiIndex" href="#PromptingTools.Experimental.RAGTools.MultiIndex">#</a> <b><u>PromptingTools.Experimental.RAGTools.MultiIndex</u></b> — <i>Type</i>. <p>Composite index that stores multiple ChunkIndex objects and their embeddings</p><p><a href="https://github.com/svilupp/PromptingTools.jl/blob/db7410f2de9c925fe77707c036c0f660b77c876b/src/Experimental/RAGTools/types.jl#L71" target="_blank" rel="noreferrer">source</a></p></div><br><div style="border-width:1px;border-style:solid;border-color:black;padding:1em;border-radius:25px;"><a id="PromptingTools.Experimental.RAGTools.RAGDetails" href="#PromptingTools.Experimental.RAGTools.RAGDetails">#</a> <b><u>PromptingTools.Experimental.RAGTools.RAGDetails</u></b> — <i>Type</i>. <div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">RAGDetails</span></span></code></pre></div><p>A struct for debugging RAG answers. It contains the question, answer, context, and the candidate chunks at each step of the RAG pipeline.</p><p><a href="https://github.com/svilupp/PromptingTools.jl/blob/db7410f2de9c925fe77707c036c0f660b77c876b/src/Experimental/RAGTools/types.jl#L186-L190" target="_blank" rel="noreferrer">source</a></p></div><br><div style="border-width:1px;border-style:solid;border-color:black;padding:1em;border-radius:25px;"><a id="PromptingTools.Experimental.RAGTools.Styler" href="#PromptingTools.Experimental.RAGTools.Styler">#</a> <b><u>PromptingTools.Experimental.RAGTools.Styler</u></b> — <i>Type</i>. <div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Styler</span></span></code></pre></div><p>Defines styling keywords for <code>printstyled</code> for each <code>AbstractAnnotatedNode</code></p><p><a href="https://github.com/svilupp/PromptingTools.jl/blob/db7410f2de9c925fe77707c036c0f660b77c876b/src/Experimental/RAGTools/annotation.jl#L27-L31" target="_blank" rel="noreferrer">source</a></p></div><br><div style="border-width:1px;border-style:solid;border-color:black;padding:1em;border-radius:25px;"><a id="PromptingTools.Experimental.RAGTools.TrigramAnnotater" href="#PromptingTools.Experimental.RAGTools.TrigramAnnotater">#</a> <b><u>PromptingTools.Experimental.RAGTools.TrigramAnnotater</u></b> — <i>Type</i>. <div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">TrigramAnnotater</span></span></code></pre></div><p>Annotation method where we score answer versus each context based on word-level trigrams that match.</p><p>It&#39;s very simple method (and it can loose some semantic meaning in longer sequences like negative), but it works reasonably well for both text and code.</p><p><a href="https://github.com/svilupp/PromptingTools.jl/blob/db7410f2de9c925fe77707c036c0f660b77c876b/src/Experimental/RAGTools/annotation.jl#L133-L139" target="_blank" rel="noreferrer">source</a></p></div><br><div style="border-width:1px;border-style:solid;border-color:black;padding:1em;border-radius:25px;"><a id="PromptingTools.Experimental.RAGTools._normalize" href="#PromptingTools.Experimental.RAGTools._normalize">#</a> <b><u>PromptingTools.Experimental.RAGTools._normalize</u></b> — <i>Function</i>. <p>Shortcut to LinearAlgebra.normalize. Provided in the package extension <code>RAGToolsExperimentalExt</code> (Requires SparseArrays and LinearAlgebra)</p><p><a href="https://github.com/svilupp/PromptingTools.jl/blob/db7410f2de9c925fe77707c036c0f660b77c876b/src/Experimental/RAGTools/preparation.jl#L37" target="_blank" rel="noreferrer">source</a></p></div><br><div style="border-width:1px;border-style:solid;border-color:black;padding:1em;border-radius:25px;"><a id="PromptingTools.Experimental.RAGTools.add_node_metadata!-Tuple{PromptingTools.Experimental.RAGTools.TrigramAnnotater, PromptingTools.Experimental.RAGTools.AnnotatedNode}" href="#PromptingTools.Experimental.RAGTools.add_node_metadata!-Tuple{PromptingTools.Experimental.RAGTools.TrigramAnnotater, PromptingTools.Experimental.RAGTools.AnnotatedNode}">#</a> <b><u>PromptingTools.Experimental.RAGTools.add_node_metadata!</u></b> — <i>Method</i>. <div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">add_node_metadata!</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(annotater</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">TrigramAnnotater</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    root</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">AnnotatedNode</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; add_sources</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Bool</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, add_scores</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Bool</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    sources</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Union{Nothing, AbstractVector{&lt;:AbstractString}}</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> nothing</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Adds metadata to the children of <code>root</code>. Metadata includes sources and scores, if requested.</p><p>Optionally, it can add a list of <code>sources</code> at the end of the printed text.</p><p>The metadata is added by inserting new nodes in the <code>root</code> children list (with no children of its own to be printed out).</p><p><a href="https://github.com/svilupp/PromptingTools.jl/blob/db7410f2de9c925fe77707c036c0f660b77c876b/src/Experimental/RAGTools/annotation.jl#L303-L313" target="_blank" rel="noreferrer">source</a></p></div><br><div style="border-width:1px;border-style:solid;border-color:black;padding:1em;border-radius:25px;"><a id="PromptingTools.Experimental.RAGTools.airag" href="#PromptingTools.Experimental.RAGTools.airag">#</a> <b><u>PromptingTools.Experimental.RAGTools.airag</u></b> — <i>Function</i>. <div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">airag</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(index</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">AbstractChunkIndex</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, rag_template</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Symbol</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> :RAGAnswerFromContext</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    question</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">AbstractString</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    top_k</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Int</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 100</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, top_n</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Int</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, minimum_similarity</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">AbstractFloat</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> -</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1.0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    tag_filter</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Union{Symbol, Vector{String}, Regex, Nothing}</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> :auto</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    rerank_strategy</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">RerankingStrategy</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> Passthrough</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    model_embedding</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">String</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> PT</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">MODEL_EMBEDDING, model_chat</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">String</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> PT</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">MODEL_CHAT,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    model_metadata</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">String</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> PT</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">MODEL_CHAT,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    metadata_template</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Symbol</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> :RAGExtractMetadataShort</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    chunks_window_margin</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Tuple{Int, Int}</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    return_details</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Bool</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> false</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, verbose</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Bool</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    rerank_kwargs</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">NamedTuple</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> NamedTuple</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    api_kwargs</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">NamedTuple</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> NamedTuple</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    aiembed_kwargs</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">NamedTuple</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> NamedTuple</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    aigenerate_kwargs</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">NamedTuple</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> NamedTuple</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    aiextract_kwargs</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">NamedTuple</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> NamedTuple</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    kwargs</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">...</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Generates a response for a given question using a Retrieval-Augmented Generation (RAG) approach.</p><p>The function selects relevant chunks from an <code>ChunkIndex</code>, optionally filters them based on metadata tags, reranks them, and then uses these chunks to construct a context for generating a response.</p><p><strong>Arguments</strong></p><ul><li><p><code>index::AbstractChunkIndex</code>: The chunk index to search for relevant text.</p></li><li><p><code>rag_template::Symbol</code>: Template for the RAG model, defaults to <code>:RAGAnswerFromContext</code>.</p></li><li><p><code>question::AbstractString</code>: The question to be answered.</p></li><li><p><code>top_k::Int</code>: Number of top candidates to retrieve based on embedding similarity.</p></li><li><p><code>top_n::Int</code>: Number of candidates to return after reranking.</p></li><li><p><code>minimum_similarity::AbstractFloat</code>: Minimum similarity threshold (between -1 and 1) for filtering chunks based on embedding similarity. Defaults to -1.0.</p></li><li><p><code>tag_filter::Union{Symbol, Vector{String}, Regex}</code>: Mechanism for filtering chunks based on tags (either automatically detected, specific tags, or a regex pattern). Disabled by setting to <code>nothing</code>.</p></li><li><p><code>rerank_strategy::RerankingStrategy</code>: Strategy for reranking the retrieved chunks. Defaults to <code>Passthrough()</code>. Use <code>CohereRerank</code> for better results (requires <code>COHERE_API_KEY</code> to be set)</p></li><li><p><code>model_embedding::String</code>: Model used for embedding the question, default is <code>PT.MODEL_EMBEDDING</code>.</p></li><li><p><code>model_chat::String</code>: Model used for generating the final response, default is <code>PT.MODEL_CHAT</code>.</p></li><li><p><code>model_metadata::String</code>: Model used for extracting metadata, default is <code>PT.MODEL_CHAT</code>.</p></li><li><p><code>metadata_template::Symbol</code>: Template for the metadata extraction process from the question, defaults to: <code>:RAGExtractMetadataShort</code></p></li><li><p><code>chunks_window_margin::Tuple{Int,Int}</code>: The window size around each chunk to consider for context building. See <code>?build_context</code> for more information.</p></li><li><p><code>return_details::Bool</code>: If <code>true</code>, returns the details used for RAG along with the response.</p></li><li><p><code>verbose::Bool</code>: If <code>true</code>, enables verbose logging.</p></li><li><p><code>api_kwargs</code>: API parameters that will be forwarded to ALL of the API calls (<code>aiembed</code>, <code>aigenerate</code>, and <code>aiextract</code>).</p></li><li><p><code>aiembed_kwargs</code>: API parameters that will be forwarded to the <code>aiembed</code> call. If you need to provide <code>api_kwargs</code> only to this function, simply add them as a keyword argument, eg, <code>aiembed_kwargs = (; api_kwargs = (; x=1))</code>.</p></li><li><p><code>aigenerate_kwargs</code>: API parameters that will be forwarded to the <code>aigenerate</code> call. If you need to provide <code>api_kwargs</code> only to this function, simply add them as a keyword argument, eg, <code>aigenerate_kwargs = (; api_kwargs = (; temperature=0.3))</code>.</p></li><li><p><code>aiextract_kwargs</code>: API parameters that will be forwarded to the <code>aiextract</code> call for the metadata extraction.</p></li></ul><p><strong>Returns</strong></p><ul><li><p>If <code>return_details</code> is <code>false</code>, returns the generated message (<code>msg</code>).</p></li><li><p>If <code>return_details</code> is <code>true</code>, returns a tuple of the generated message (<code>msg</code>) and the <code>RAGDetails</code> for context (<code>rag_details</code>).</p></li></ul><p><strong>Notes</strong></p><ul><li><p>The function first finds the closest chunks to the question embedding, then optionally filters these based on tags. After that, it reranks the candidates and builds a context for the RAG model.</p></li><li><p>The <code>tag_filter</code> can be used to refine the search. If set to <code>:auto</code>, it attempts to automatically determine relevant tags (if <code>index</code> has them available).</p></li><li><p>The <code>chunks_window_margin</code> allows including surrounding chunks for richer context, considering they are from the same source.</p></li><li><p>The function currently supports only single <code>ChunkIndex</code>.</p></li></ul><p><strong>Examples</strong></p><p>Using <code>airag</code> to get a response for a question:</p><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">index </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> build_index</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">...</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># create an index</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">question </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;How to make a barplot in Makie.jl?&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">msg </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> airag</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(index, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">:RAGAnswerFromContext</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; question)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># or simply</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">msg </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> airag</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(index; question)</span></span></code></pre></div><p>To understand the details of the RAG process, use <code>return_details=true</code></p><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">msg, details </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> airag</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(index; question, return_details </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># details is a RAGDetails object with all the internal steps of the \`airag\` function</span></span></code></pre></div><p>You can also pretty-print <code>details</code> to highlight generated text vs text that is supported by context. It also includes annotations of which context was used for each part of the response (where available).</p><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">PT</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">pprint</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(details)</span></span></code></pre></div><p>See also <code>build_index</code>, <code>build_context</code>, <code>CandidateChunks</code>, <code>find_closest</code>, <code>find_tags</code>, <code>rerank</code>, <code>annotate_support</code></p><p><a href="https://github.com/svilupp/PromptingTools.jl/blob/db7410f2de9c925fe77707c036c0f660b77c876b/src/Experimental/RAGTools/generation.jl#L39-L117" target="_blank" rel="noreferrer">source</a></p></div><br><div style="border-width:1px;border-style:solid;border-color:black;padding:1em;border-radius:25px;"><a id="PromptingTools.Experimental.RAGTools.align_node_styles!-Tuple{PromptingTools.Experimental.RAGTools.TrigramAnnotater, AbstractVector{&lt;:PromptingTools.Experimental.RAGTools.AnnotatedNode}}" href="#PromptingTools.Experimental.RAGTools.align_node_styles!-Tuple{PromptingTools.Experimental.RAGTools.TrigramAnnotater, AbstractVector{&lt;:PromptingTools.Experimental.RAGTools.AnnotatedNode}}">#</a> <b><u>PromptingTools.Experimental.RAGTools.align_node_styles!</u></b> — <i>Method</i>. <div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">align_node_styles!</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(annotater</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">TrigramAnnotater</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, nodes</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">AbstractVector{&lt;:AnnotatedNode}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; kwargs</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">...</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Aligns the styles of the nodes based on the surrounding nodes (&quot;fill-in-the-middle&quot;).</p><p>If the node has no score, but the surrounding nodes have the same style, the node will inherit the style of the surrounding nodes.</p><p><a href="https://github.com/svilupp/PromptingTools.jl/blob/db7410f2de9c925fe77707c036c0f660b77c876b/src/Experimental/RAGTools/annotation.jl#L176-L182" target="_blank" rel="noreferrer">source</a></p></div><br><div style="border-width:1px;border-style:solid;border-color:black;padding:1em;border-radius:25px;"><a id="PromptingTools.Experimental.RAGTools.annotate_support-Tuple{PromptingTools.Experimental.RAGTools.TrigramAnnotater, AbstractString, AbstractVector}" href="#PromptingTools.Experimental.RAGTools.annotate_support-Tuple{PromptingTools.Experimental.RAGTools.TrigramAnnotater, AbstractString, AbstractVector}">#</a> <b><u>PromptingTools.Experimental.RAGTools.annotate_support</u></b> — <i>Method</i>. <div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">annotate_support</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(annotater</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">TrigramAnnotater</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, answer</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">AbstractString</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    context</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">AbstractVector</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; min_score</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Float64</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0.5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    skip_trigrams</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Bool</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, hashed</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Bool</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    sources</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Union{Nothing, AbstractVector{&lt;:AbstractString}}</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> nothing</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    min_source_score</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Float64</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0.25</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    add_sources</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Bool</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    add_scores</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Bool</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, kwargs</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">...</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Annotates the <code>answer</code> with the overlap/what&#39;s supported in <code>context</code> and returns the annotated tree of nodes representing the <code>answer</code></p><p>Returns a &quot;root&quot; node with children nodes representing the sentences/code blocks in the <code>answer</code>. Only the &quot;leaf&quot; nodes are to be printed (to avoid duplication), &quot;leaf&quot; nodes are those with NO children.</p><p>Default logic:</p><ul><li><p>Split into sentences/code blocks, then into tokens (~words).</p></li><li><p>Then match each token (~word) exactly.</p></li><li><p>If no exact match found, count trigram-based match (include the surrounding tokens for better contextual awareness).</p></li><li><p>If the match is higher than <code>min_score</code>, it&#39;s recorded in the <code>score</code> of the node.</p></li></ul><p><strong>Arguments</strong></p><ul><li><p><code>annotater::TrigramAnnotater</code>: Annotater to use</p></li><li><p><code>answer::AbstractString</code>: Text to annotate</p></li><li><p><code>context::AbstractVector</code>: Context to annotate against, ie, look for &quot;support&quot; in the texts in <code>context</code></p></li><li><p><code>min_score::Float64</code>: Minimum score to consider a match. Default: 0.5, which means that half of the trigrams of each word should match</p></li><li><p><code>skip_trigrams::Bool</code>: Whether to potentially skip trigram matching if exact full match is found. Default: true</p></li><li><p><code>hashed::Bool</code>: Whether to use hashed trigrams. It&#39;s harder to debug, but it&#39;s much faster for larger texts (hashed text are held in a Set to deduplicate). Default: true</p></li><li><p><code>sources::Union{Nothing, AbstractVector{&lt;:AbstractString}}</code>: Sources to add at the end of the context. Default: nothing</p></li><li><p><code>min_source_score::Float64</code>: Minimum score to consider/to display a source. Default: 0.25, which means that at least a quarter of the trigrams of each word should match to some context. The threshold is lower than <code>min_score</code>, because it&#39;s average across ALL words in a block, so it&#39;s much harder to match fully with generated text.</p></li><li><p><code>add_sources::Bool</code>: Whether to add sources at the end of each code block/sentence. Sources are addded in the square brackets like &quot;[1]&quot;. Default: true</p></li><li><p><code>add_scores::Bool</code>: Whether to add source-matching scores at the end of each code block/sentence. Scores are added in the square brackets like &quot;[0.75]&quot;. Default: true</p></li><li><p>kwargs: Additional keyword arguments to pass to <code>trigram_support!</code> and <code>set_node_style!</code>. See their documentation for more details (eg, customize the colors of the nodes based on the score)</p></li></ul><p><strong>Example</strong></p><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">annotater </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> TrigramAnnotater</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">context </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &quot;This is a test context.&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Another context sentence.&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Final piece of context.&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">answer </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;This is a test context. Another context sentence.&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">annotated_root </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> annotate_support</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(annotater, answer, context)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">pprint</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(annotated_root) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># pretty print the annotated tree</span></span></code></pre></div><p><a href="https://github.com/svilupp/PromptingTools.jl/blob/db7410f2de9c925fe77707c036c0f660b77c876b/src/Experimental/RAGTools/annotation.jl#L393-L436" target="_blank" rel="noreferrer">source</a></p></div><br><div style="border-width:1px;border-style:solid;border-color:black;padding:1em;border-radius:25px;"><a id="PromptingTools.Experimental.RAGTools.build_context-Tuple{PromptingTools.Experimental.RAGTools.AbstractChunkIndex, CandidateChunks}" href="#PromptingTools.Experimental.RAGTools.build_context-Tuple{PromptingTools.Experimental.RAGTools.AbstractChunkIndex, CandidateChunks}">#</a> <b><u>PromptingTools.Experimental.RAGTools.build_context</u></b> — <i>Method</i>. <div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">build_context</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(index</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">AbstractChunkIndex</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, reranked_candidates</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">CandidateChunks</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; chunks_window_margin</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Tuple{Int, Int}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Vector{String}</span></span></code></pre></div><p>Build context strings for each position in <code>reranked_candidates</code> considering a window margin around each position.</p><p><strong>Arguments</strong></p><ul><li><p><code>reranked_candidates::CandidateChunks</code>: Candidate chunks which contain positions to extract context from.</p></li><li><p><code>index::ChunkIndex</code>: The index containing chunks and sources.</p></li><li><p><code>chunks_window_margin::Tuple{Int, Int}</code>: A tuple indicating the margin (before, after) around each position to include in the context. Defaults to <code>(1,1)</code>, which means 1 preceding and 1 suceeding chunk will be included. With <code>(0,0)</code>, only the matching chunks will be included.</p></li></ul><p><strong>Returns</strong></p><ul><li><code>Vector{String}</code>: A vector of context strings, each corresponding to a position in <code>reranked_candidates</code>.</li></ul><p><strong>Examples</strong></p><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">index </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> ChunkIndex</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">...</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Assuming a proper index is defined</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">candidates </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> CandidateChunks</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(index</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">id, [</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">4</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">], [</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0.1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0.2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">])</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">context </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> build_context</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(index, candidates; chunks_window_margin</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># include only one following chunk for each matching chunk</span></span></code></pre></div><p><a href="https://github.com/svilupp/PromptingTools.jl/blob/db7410f2de9c925fe77707c036c0f660b77c876b/src/Experimental/RAGTools/generation.jl#L4-L24" target="_blank" rel="noreferrer">source</a></p></div><br><div style="border-width:1px;border-style:solid;border-color:black;padding:1em;border-radius:25px;"><a id="PromptingTools.Experimental.RAGTools.build_index" href="#PromptingTools.Experimental.RAGTools.build_index">#</a> <b><u>PromptingTools.Experimental.RAGTools.build_index</u></b> — <i>Function</i>. <p>Build an index for RAG (Retriever-Augmented Generation) applications. REQUIRES SparseArrays and LinearAlgebra packages to be loaded!!</p><p><a href="https://github.com/svilupp/PromptingTools.jl/blob/db7410f2de9c925fe77707c036c0f660b77c876b/src/Experimental/RAGTools/preparation.jl#L34" target="_blank" rel="noreferrer">source</a></p></div><br><div style="border-width:1px;border-style:solid;border-color:black;padding:1em;border-radius:25px;"><a id="PromptingTools.Experimental.RAGTools.build_index-Tuple{Vector{&lt;:AbstractString}}" href="#PromptingTools.Experimental.RAGTools.build_index-Tuple{Vector{&lt;:AbstractString}}">#</a> <b><u>PromptingTools.Experimental.RAGTools.build_index</u></b> — <i>Method</i>. <div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">build_index</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(files_or_docs</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Vector{&lt;:AbstractString}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; reader</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Symbol</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> :files</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    separators </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\n\\n</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;. &quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\n</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">], max_length</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Int</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 256</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    sources</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Vector{&lt;:AbstractString}</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> files_or_docs,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    extras</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Union{Nothing, AbstractVector}</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> nothing</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    extract_metadata</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Bool</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> false</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, verbose</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Integer</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    index_id </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> gensym</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;ChunkIndex&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    metadata_template</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Symbol</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> :RAGExtractMetadataShort</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    model_embedding</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">String</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> PT</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">MODEL_EMBEDDING,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    model_metadata</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">String</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> PT</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">MODEL_CHAT,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    embedding_kwargs</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">NamedTuple</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> NamedTuple</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    metadata_kwargs</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">NamedTuple</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> NamedTuple</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    api_kwargs</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">NamedTuple</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> NamedTuple</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    cost_tracker </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Threads</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Atomic{Float64}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0.0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">))</span></span></code></pre></div><p>Build an index for RAG (Retriever-Augmented Generation) applications from the provided file paths. The function processes each file, splits its content into chunks, embeds these chunks, optionally extracts metadata, and then compiles this information into a retrievable index.</p><p><strong>Arguments</strong></p><ul><li><p><code>files_or_docs</code>: A vector of valid file paths OR string documents to be indexed (chunked and embedded).</p></li><li><p><code>reader</code>: A symbol indicating the type of input, can be either <code>:files</code> or <code>:docs</code>. Default is <code>:files</code>.</p></li><li><p><code>separators</code>: A list of strings used as separators for splitting the text in each file into chunks. Default is <code>[\\n\\n, &quot;. &quot;, &quot;\\n&quot;]</code>.</p></li><li><p><code>max_length</code>: The maximum length of each chunk (if possible with provided separators). Default is 256.</p></li><li><p><code>sources</code>: A vector of strings indicating the source of each chunk. Default is equal to <code>files_or_docs</code> (for <code>reader=:files</code>)</p></li><li><p><code>extras</code>: An optional vector of extra information to be stored with each chunk. Default is <code>nothing</code>.</p></li><li><p><code>extract_metadata</code>: A boolean flag indicating whether to extract metadata from each chunk (to build filter <code>tags</code> in the index). Default is <code>false</code>. Metadata extraction incurs additional cost and requires <code>model_metadata</code> and <code>metadata_template</code> to be provided.</p></li><li><p><code>verbose</code>: An Integer specifying the verbosity of the logs. Default is <code>1</code> (high-level logging). <code>0</code> is disabled.</p></li><li><p><code>metadata_template</code>: A symbol indicating the template to be used for metadata extraction. Default is <code>:RAGExtractMetadataShort</code>.</p></li><li><p><code>model_embedding</code>: The model to use for embedding.</p></li><li><p><code>model_metadata</code>: The model to use for metadata extraction.</p></li><li><p><code>api_kwargs</code>: Parameters to be provided to the API endpoint. Shared across all API calls.</p></li><li><p><code>embedding_kwargs</code>: Parameters to be provided to the <code>get_embedding</code> function. Useful to change the batch sizes (<code>target_batch_size_length</code>) or reduce asyncmap tasks (<code>ntasks</code>).</p></li><li><p><code>metadata_kwargs</code>: Parameters to be provided to the <code>get_metadata</code> function.</p></li></ul><p><strong>Returns</strong></p><ul><li><code>ChunkIndex</code>: An object containing the compiled index of chunks, embeddings, tags, vocabulary, and sources.</li></ul><p>See also: <code>MultiIndex</code>, <code>CandidateChunks</code>, <code>find_closest</code>, <code>find_tags</code>, <code>rerank</code>, <code>airag</code></p><p><strong>Examples</strong></p><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Assuming \`test_files\` is a vector of file paths</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">index </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> build_index</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(test_files; max_length</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">10</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, extract_metadata</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Another example with metadata extraction and verbose output (\`reader=:files\` is implicit)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">index </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> build_index</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">([</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;file1.txt&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;file2.txt&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]; </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                    separators</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;. &quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">], </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                    extract_metadata</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                    verbose</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p><strong>Notes</strong></p><ul><li>If you get errors about exceeding embedding input sizes, first check the <code>max_length</code> in your chunks. If that does NOT resolve the issue, try changing the <code>embedding_kwargs</code>. In particular, reducing the <code>target_batch_size_length</code> parameter (eg, 10_000) and number of tasks <code>ntasks=1</code>. Some providers cannot handle large batch sizes (eg, Databricks).</li></ul><p><a href="https://github.com/svilupp/PromptingTools.jl/blob/db7410f2de9c925fe77707c036c0f660b77c876b/src/Experimental/RAGTools/preparation.jl#L204-L263" target="_blank" rel="noreferrer">source</a></p></div><br><div style="border-width:1px;border-style:solid;border-color:black;padding:1em;border-radius:25px;"><a id="PromptingTools.Experimental.RAGTools.build_qa_evals-Tuple{Vector{&lt;:AbstractString}, Vector{&lt;:AbstractString}}" href="#PromptingTools.Experimental.RAGTools.build_qa_evals-Tuple{Vector{&lt;:AbstractString}, Vector{&lt;:AbstractString}}">#</a> <b><u>PromptingTools.Experimental.RAGTools.build_qa_evals</u></b> — <i>Method</i>. <div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">build_qa_evals</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(doc_chunks</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Vector{&lt;:AbstractString}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, sources</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Vector{&lt;:AbstractString}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">               model</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">PT</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">MODEL_CHAT, instructions</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;None.&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, qa_template</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Symbol</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">:RAGCreateQAFromContext</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">               verbose</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Bool</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, api_kwargs</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">NamedTuple</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> NamedTuple</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(), kwargs</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">...</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Vector{QAEvalItem}</span></span></code></pre></div><p>Create a collection of question and answer evaluations (<code>QAEvalItem</code>) from document chunks and sources. This function generates Q&amp;A pairs based on the provided document chunks, using a specified AI model and template.</p><p><strong>Arguments</strong></p><ul><li><p><code>doc_chunks::Vector{&lt;:AbstractString}</code>: A vector of document chunks, each representing a segment of text.</p></li><li><p><code>sources::Vector{&lt;:AbstractString}</code>: A vector of source identifiers corresponding to each chunk in <code>doc_chunks</code> (eg, filenames or paths).</p></li><li><p><code>model</code>: The AI model used for generating Q&amp;A pairs. Default is <code>PT.MODEL_CHAT</code>.</p></li><li><p><code>instructions::String</code>: Additional instructions or context to provide to the model generating QA sets. Defaults to &quot;None.&quot;.</p></li><li><p><code>qa_template::Symbol</code>: A template symbol that dictates the AITemplate that will be used. It must have placeholder <code>context</code>. Default is <code>:CreateQAFromContext</code>.</p></li><li><p><code>api_kwargs::NamedTuple</code>: Parameters that will be forwarded to the API endpoint.</p></li><li><p><code>verbose::Bool</code>: If <code>true</code>, additional information like costs will be logged. Defaults to <code>true</code>.</p></li></ul><p><strong>Returns</strong></p><p><code>Vector{QAEvalItem}</code>: A vector of <code>QAEvalItem</code> structs, each containing a source, context, question, and answer. Invalid or empty items are filtered out.</p><p><strong>Notes</strong></p><ul><li><p>The function internally uses <code>aiextract</code> to generate Q&amp;A pairs based on the provided <code>qa_template</code>. So you can use any kwargs that you want.</p></li><li><p>Each <code>QAEvalItem</code> includes the context (document chunk), the generated question and answer, and the source.</p></li><li><p>The function tracks and reports the cost of AI calls if <code>verbose</code> is enabled.</p></li><li><p>Items where the question, answer, or context is empty are considered invalid and are filtered out.</p></li></ul><p><strong>Examples</strong></p><p>Creating Q&amp;A evaluations from a set of document chunks:</p><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">doc_chunks </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Text from document 1&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Text from document 2&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">sources </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;source1&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;source2&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">qa_evals </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> build_qa_evals</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(doc_chunks, sources)</span></span></code></pre></div><p><a href="https://github.com/svilupp/PromptingTools.jl/blob/db7410f2de9c925fe77707c036c0f660b77c876b/src/Experimental/RAGTools/evaluation.jl#L65-L100" target="_blank" rel="noreferrer">source</a></p></div><br><div style="border-width:1px;border-style:solid;border-color:black;padding:1em;border-radius:25px;"><a id="PromptingTools.Experimental.RAGTools.build_tags" href="#PromptingTools.Experimental.RAGTools.build_tags">#</a> <b><u>PromptingTools.Experimental.RAGTools.build_tags</u></b> — <i>Function</i>. <p>Builds a matrix of tags and a vocabulary list. REQUIRES SparseArrays and LinearAlgebra packages to be loaded!!</p><p><a href="https://github.com/svilupp/PromptingTools.jl/blob/db7410f2de9c925fe77707c036c0f660b77c876b/src/Experimental/RAGTools/preparation.jl#L30" target="_blank" rel="noreferrer">source</a></p></div><br><div style="border-width:1px;border-style:solid;border-color:black;padding:1em;border-radius:25px;"><a id="PromptingTools.Experimental.RAGTools.cohere_api-Tuple{}" href="#PromptingTools.Experimental.RAGTools.cohere_api-Tuple{}">#</a> <b><u>PromptingTools.Experimental.RAGTools.cohere_api</u></b> — <i>Method</i>. <div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">cohere_api</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">api_key</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">AbstractString</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">endpoint</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">url</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">AbstractString</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;https://api.cohere.ai/v1&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">http_kwargs</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">NamedTuple</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">NamedTuple</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">kwargs</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">...</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Lightweight wrapper around the Cohere API. See <a href="https://cohere.com/docs" target="_blank" rel="noreferrer">https://cohere.com/docs</a> for more details.</p><p><strong>Arguments</strong></p><ul><li><p><code>api_key</code>: Your Cohere API key. You can get one from <a href="https://dashboard.cohere.com/welcome/register" target="_blank" rel="noreferrer">https://dashboard.cohere.com/welcome/register</a> (trial access is for free).</p></li><li><p><code>endpoint</code>: The Cohere endpoint to call.</p></li><li><p><code>url</code>: The base URL for the Cohere API. Default is <code>https://api.cohere.ai/v1</code>.</p></li><li><p><code>http_kwargs</code>: Any additional keyword arguments to pass to <code>HTTP.post</code>.</p></li><li><p><code>kwargs</code>: Any additional keyword arguments to pass to the Cohere API.</p></li></ul><p><a href="https://github.com/svilupp/PromptingTools.jl/blob/db7410f2de9c925fe77707c036c0f660b77c876b/src/Experimental/RAGTools/api_services.jl#L1-L17" target="_blank" rel="noreferrer">source</a></p></div><br><div style="border-width:1px;border-style:solid;border-color:black;padding:1em;border-radius:25px;"><a id="PromptingTools.Experimental.RAGTools.find_closest-Tuple{AbstractMatrix{&lt;:Real}, AbstractVector{&lt;:Real}}" href="#PromptingTools.Experimental.RAGTools.find_closest-Tuple{AbstractMatrix{&lt;:Real}, AbstractVector{&lt;:Real}}">#</a> <b><u>PromptingTools.Experimental.RAGTools.find_closest</u></b> — <i>Method</i>. <div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">find_closest</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(emb</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">AbstractMatrix{&lt;:Real}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    query_emb</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">AbstractVector{&lt;:Real}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    top_k</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Int</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 100</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, minimum_similarity</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">AbstractFloat</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> -</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1.0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Finds the indices of chunks (represented by embeddings in <code>emb</code>) that are closest (cosine similarity) to query embedding (<code>query_emb</code>).</p><p>If <code>minimum_similarity</code> is provided, only indices with similarity greater than or equal to it are returned. Similarity can be between -1 and 1 (-1 = completely opposite, 1 = exactly the same).</p><p>Returns only <code>top_k</code> closest indices.</p><p><a href="https://github.com/svilupp/PromptingTools.jl/blob/db7410f2de9c925fe77707c036c0f660b77c876b/src/Experimental/RAGTools/retrieval.jl#L1-L12" target="_blank" rel="noreferrer">source</a></p></div><br><div style="border-width:1px;border-style:solid;border-color:black;padding:1em;border-radius:25px;"><a id="PromptingTools.Experimental.RAGTools.get_chunks-Tuple{Vector{&lt;:AbstractString}}" href="#PromptingTools.Experimental.RAGTools.get_chunks-Tuple{Vector{&lt;:AbstractString}}">#</a> <b><u>PromptingTools.Experimental.RAGTools.get_chunks</u></b> — <i>Method</i>. <div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">get_chunks</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(files_or_docs</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Vector{&lt;:AbstractString}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; reader</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Symbol</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> :files</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    sources</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Vector{&lt;:AbstractString}</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> files_or_docs,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    verbose</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Bool</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    separators </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\n\\n</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;. &quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\n</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">], max_length</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Int</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 256</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Chunks the provided <code>files_or_docs</code> into chunks of maximum length <code>max_length</code> (if possible with provided <code>separators</code>).</p><p>Supports two modes of operation:</p><ul><li><p><code>reader=:files</code>: The function opens each file in <code>files_or_docs</code> and reads its content.</p></li><li><p><code>reader=:docs</code>: The function assumes that <code>files_or_docs</code> is a vector of strings to be chunked.</p></li></ul><p><strong>Arguments</strong></p><ul><li><p><code>files_or_docs</code>: A vector of valid file paths OR string documents to be chunked.</p></li><li><p><code>reader</code>: A symbol indicating the type of input, can be either <code>:files</code> or <code>:docs</code>. Default is <code>:files</code>.</p></li><li><p><code>separators</code>: A list of strings used as separators for splitting the text in each file into chunks. Default is <code>[\\n\\n&quot;, &quot;. &quot;, &quot;\\n&quot;]</code>.</p></li><li><p><code>max_length</code>: The maximum length of each chunk (if possible with provided separators). Default is 256.</p></li><li><p><code>sources</code>: A vector of strings indicating the source of each chunk. Default is equal to <code>files_or_docs</code> (for <code>reader=:files</code>)</p></li></ul><p><a href="https://github.com/svilupp/PromptingTools.jl/blob/db7410f2de9c925fe77707c036c0f660b77c876b/src/Experimental/RAGTools/preparation.jl#L40-L59" target="_blank" rel="noreferrer">source</a></p></div><br><div style="border-width:1px;border-style:solid;border-color:black;padding:1em;border-radius:25px;"><a id="PromptingTools.Experimental.RAGTools.get_embeddings-Tuple{Vector{&lt;:AbstractString}}" href="#PromptingTools.Experimental.RAGTools.get_embeddings-Tuple{Vector{&lt;:AbstractString}}">#</a> <b><u>PromptingTools.Experimental.RAGTools.get_embeddings</u></b> — <i>Method</i>. <div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">get_embeddings</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(docs</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Vector{&lt;:AbstractString}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    verbose</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Bool</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    cost_tracker </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Threads</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Atomic{Float64}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0.0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    target_batch_size_length</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Int</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 80_000</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    ntasks</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Int</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 4</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Threads</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">nthreads</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    kwargs</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">...</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Embeds a vector of <code>docs</code> using the provided model (kwarg <code>model</code>).</p><p>Tries to batch embedding calls for roughly 80K characters per call (to avoid exceeding the API limit) but reduce network latency.</p><p><strong>Notes</strong></p><ul><li><p><code>docs</code> are assumed to be already chunked to the reasonable sizes that fit within the embedding context limit.</p></li><li><p>If you get errors about exceeding input sizes, first check the <code>max_length</code> in your chunks. If that does NOT resolve the issue, try reducing the <code>target_batch_size_length</code> parameter (eg, 10_000) and number of tasks <code>ntasks=1</code>. Some providers cannot handle large batch sizes.</p></li></ul><p><strong>Arguments</strong></p><ul><li><p><code>docs</code>: A vector of strings to be embedded.</p></li><li><p><code>verbose</code>: A boolean flag for verbose output. Default is <code>true</code>.</p></li><li><p><code>model</code>: The model to use for embedding. Default is <code>PT.MODEL_EMBEDDING</code>.</p></li><li><p><code>cost_tracker</code>: A <code>Threads.Atomic{Float64}</code> object to track the total cost of the API calls. Useful to pass the total cost to the parent call.</p></li><li><p><code>target_batch_size_length</code>: The target length (in characters) of each batch of document chunks sent for embedding. Default is 80_000 characters. Speeds up embedding process.</p></li><li><p><code>ntasks</code>: The number of tasks to use for asyncmap. Default is 4 * Threads.nthreads().</p></li></ul><p><a href="https://github.com/svilupp/PromptingTools.jl/blob/db7410f2de9c925fe77707c036c0f660b77c876b/src/Experimental/RAGTools/preparation.jl#L101-L127" target="_blank" rel="noreferrer">source</a></p></div><br><div style="border-width:1px;border-style:solid;border-color:black;padding:1em;border-radius:25px;"><a id="PromptingTools.Experimental.RAGTools.get_metadata-Tuple{Vector{&lt;:AbstractString}}" href="#PromptingTools.Experimental.RAGTools.get_metadata-Tuple{Vector{&lt;:AbstractString}}">#</a> <b><u>PromptingTools.Experimental.RAGTools.get_metadata</u></b> — <i>Method</i>. <div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">get_metadata</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(docs</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Vector{&lt;:AbstractString}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    verbose</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Bool</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    cost_tracker </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Threads</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Atomic{Float64}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0.0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    kwargs</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">...</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Extracts metadata from a vector of <code>docs</code> using the provided model (kwarg <code>model</code>).</p><p><strong>Arguments</strong></p><ul><li><p><code>docs</code>: A vector of strings to be embedded.</p></li><li><p><code>verbose</code>: A boolean flag for verbose output. Default is <code>true</code>.</p></li><li><p><code>model</code>: The model to use for metadata extraction. Default is <code>PT.MODEL_CHAT</code>.</p></li><li><p><code>metadata_template</code>: A template to be used for metadata extraction. Default is <code>:RAGExtractMetadataShort</code>.</p></li><li><p><code>cost_tracker</code>: A <code>Threads.Atomic{Float64}</code> object to track the total cost of the API calls. Useful to pass the total cost to the parent call.</p></li></ul><p><a href="https://github.com/svilupp/PromptingTools.jl/blob/db7410f2de9c925fe77707c036c0f660b77c876b/src/Experimental/RAGTools/preparation.jl#L161-L176" target="_blank" rel="noreferrer">source</a></p></div><br><div style="border-width:1px;border-style:solid;border-color:black;padding:1em;border-radius:25px;"><a id="PromptingTools.Experimental.RAGTools.metadata_extract-Tuple{PromptingTools.Experimental.RAGTools.MetadataItem}" href="#PromptingTools.Experimental.RAGTools.metadata_extract-Tuple{PromptingTools.Experimental.RAGTools.MetadataItem}">#</a> <b><u>PromptingTools.Experimental.RAGTools.metadata_extract</u></b> — <i>Method</i>. <div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">metadata_extract</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(item</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">MetadataItem</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">metadata_extract</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(items</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Vector{MetadataItem}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Extracts the metadata item into a string of the form <code>category:::value</code> (lowercased and spaces replaced with underscores).</p><p><strong>Example</strong></p><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">msg </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> aiextract</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">:RAGExtractMetadataShort</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; return_type</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">MaybeMetadataItems, text</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;I like package DataFrames&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, instructions</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;None.&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">metadata </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> metadata_extract</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(msg</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">content</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">items)</span></span></code></pre></div><p><a href="https://github.com/svilupp/PromptingTools.jl/blob/db7410f2de9c925fe77707c036c0f660b77c876b/src/Experimental/RAGTools/preparation.jl#L11-L22" target="_blank" rel="noreferrer">source</a></p></div><br><div style="border-width:1px;border-style:solid;border-color:black;padding:1em;border-radius:25px;"><a id="PromptingTools.Experimental.RAGTools.rerank-Tuple{PromptingTools.Experimental.RAGTools.CohereRerank, PromptingTools.Experimental.RAGTools.AbstractChunkIndex, Any, Any}" href="#PromptingTools.Experimental.RAGTools.rerank-Tuple{PromptingTools.Experimental.RAGTools.CohereRerank, PromptingTools.Experimental.RAGTools.AbstractChunkIndex, Any, Any}">#</a> <b><u>PromptingTools.Experimental.RAGTools.rerank</u></b> — <i>Method</i>. <div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">rerank</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(strategy</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">CohereRerank</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, index</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">AbstractChunkIndex</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, question,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    candidate_chunks;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    verbose</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Bool</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> false</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    api_key</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">AbstractString</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> PT</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">COHERE_API_KEY,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    top_n</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Integer</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> length</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(candidate_chunks</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">distances),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    model</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">AbstractString</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;rerank-english-v2.0&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    return_documents</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Bool</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> false</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    kwargs</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">...</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Re-ranks a list of candidate chunks using the Cohere Rerank API. See <a href="https://cohere.com/rerank" target="_blank" rel="noreferrer">https://cohere.com/rerank</a> for more details.</p><p><strong>Arguments</strong></p><ul><li><p><code>query</code>: The query to be used for the search.</p></li><li><p><code>documents</code>: A vector of documents to be reranked. The total max chunks (<code>length of documents * max_chunks_per_doc</code>) must be less than 10000. We recommend less than 1000 documents for optimal performance.</p></li><li><p><code>top_n</code>: The number of most relevant documents to return. Default is <code>length(documents)</code>.</p></li><li><p><code>model</code>: The model to use for reranking. Default is <code>rerank-english-v2.0</code>.</p></li><li><p><code>return_documents</code>: A boolean flag indicating whether to return the reranked documents in the response. Default is <code>false</code>.</p></li><li><p><code>max_chunks_per_doc</code>: The maximum number of chunks to use per document. Default is <code>10</code>.</p></li><li><p><code>verbose</code>: A boolean flag indicating whether to print verbose logging. Default is <code>false</code>.</p></li></ul><p><a href="https://github.com/svilupp/PromptingTools.jl/blob/db7410f2de9c925fe77707c036c0f660b77c876b/src/Experimental/RAGTools/retrieval.jl#L96-L118" target="_blank" rel="noreferrer">source</a></p></div><br><div style="border-width:1px;border-style:solid;border-color:black;padding:1em;border-radius:25px;"><a id="PromptingTools.Experimental.RAGTools.run_qa_evals-Tuple{PromptingTools.Experimental.RAGTools.AbstractChunkIndex, AbstractVector{&lt;:PromptingTools.Experimental.RAGTools.QAEvalItem}}" href="#PromptingTools.Experimental.RAGTools.run_qa_evals-Tuple{PromptingTools.Experimental.RAGTools.AbstractChunkIndex, AbstractVector{&lt;:PromptingTools.Experimental.RAGTools.QAEvalItem}}">#</a> <b><u>PromptingTools.Experimental.RAGTools.run_qa_evals</u></b> — <i>Method</i>. <div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">run_qa_evals</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(index</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">AbstractChunkIndex</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, qa_items</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">AbstractVector{&lt;:QAEvalItem}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    api_kwargs</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">NamedTuple</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> NamedTuple</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    airag_kwargs</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">NamedTuple</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> NamedTuple</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    qa_evals_kwargs</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">NamedTuple</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> NamedTuple</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    verbose</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Bool</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, parameters_dict</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Dict{Symbol, &lt;:Any}</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> Dict{Symbol, Any}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">())</span></span></code></pre></div><p>Evaluates a vector of <code>QAEvalItem</code>s and returns a vector <code>QAEvalResult</code>. This function assesses the relevance and accuracy of the answers generated in a QA evaluation context.</p><p>See <code>?run_qa_evals</code> for more details.</p><p><strong>Arguments</strong></p><ul><li><p><code>qa_items::AbstractVector{&lt;:QAEvalItem}</code>: The vector of QA evaluation items containing the questions and their answers.</p></li><li><p><code>verbose::Bool</code>: If <code>true</code>, enables verbose logging. Defaults to <code>true</code>.</p></li><li><p><code>api_kwargs::NamedTuple</code>: Parameters that will be forwarded to the API calls. See <code>?aiextract</code> for details.</p></li><li><p><code>airag_kwargs::NamedTuple</code>: Parameters that will be forwarded to <code>airag</code> calls. See <code>?airag</code> for details.</p></li><li><p><code>qa_evals_kwargs::NamedTuple</code>: Parameters that will be forwarded to <code>run_qa_evals</code> calls. See <code>?run_qa_evals</code> for details.</p></li><li><p><code>parameters_dict::Dict{Symbol, Any}</code>: Track any parameters used for later evaluations. Keys must be Symbols.</p></li></ul><p><strong>Returns</strong></p><p><code>Vector{QAEvalResult}</code>: Vector of evaluation results that includes various scores and metadata related to the QA evaluation.</p><p><strong>Example</strong></p><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">index </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;...&quot;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> # Assuming a proper index is defined</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">qa_items </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">QAEvalItem</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(question</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;What is the capital of France?&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, answer</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Paris&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, context</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;France is a country in Europe.&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">),</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">            QAEvalItem</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(question</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;What is the capital of Germany?&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, answer</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Berlin&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, context</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Germany is a country in Europe.&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)]</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Let&#39;s run a test with \`top_k=5\`</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">results </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> run_qa_evals</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(index, qa_items; airag_kwargs</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(;top_k</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">), parameters_dict</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Dict</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">:top_k</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">))</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Filter out the &quot;failed&quot; calls</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">results </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> filter</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(x</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;!</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">isnothing</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(x</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">answer_score), results);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># See average judge score</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mean</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(x</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">x</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">answer_score, results)</span></span></code></pre></div><p><a href="https://github.com/svilupp/PromptingTools.jl/blob/db7410f2de9c925fe77707c036c0f660b77c876b/src/Experimental/RAGTools/evaluation.jl#L221-L260" target="_blank" rel="noreferrer">source</a></p></div><br><div style="border-width:1px;border-style:solid;border-color:black;padding:1em;border-radius:25px;"><a id="PromptingTools.Experimental.RAGTools.run_qa_evals-Tuple{PromptingTools.Experimental.RAGTools.QAEvalItem, PromptingTools.Experimental.RAGTools.RAGDetails}" href="#PromptingTools.Experimental.RAGTools.run_qa_evals-Tuple{PromptingTools.Experimental.RAGTools.QAEvalItem, PromptingTools.Experimental.RAGTools.RAGDetails}">#</a> <b><u>PromptingTools.Experimental.RAGTools.run_qa_evals</u></b> — <i>Method</i>. <div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">run_qa_evals</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(qa_item</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">QAEvalItem</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, ctx</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">RAGDetails</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; verbose</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Bool</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">             parameters_dict</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Dict{Symbol, &lt;:Any}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, judge_template</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Symbol</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> :RAGJudgeAnswerFromContext</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">             model_judge</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">AbstractString</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, api_kwargs</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">NamedTuple</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> NamedTuple</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> QAEvalResult</span></span></code></pre></div><p>Evaluates a single <code>QAEvalItem</code> using RAG details (<code>RAGDetails</code>) and returns a <code>QAEvalResult</code> structure. This function assesses the relevance and accuracy of the answers generated in a QA evaluation context.</p><p><strong>Arguments</strong></p><ul><li><p><code>qa_item::QAEvalItem</code>: The QA evaluation item containing the question and its answer.</p></li><li><p><code>ctx::RAGDetails</code>: The context used for generating the QA pair, including the original context and the answers. Comes from <code>airag(...; return_context=true)</code></p></li><li><p><code>verbose::Bool</code>: If <code>true</code>, enables verbose logging. Defaults to <code>true</code>.</p></li><li><p><code>parameters_dict::Dict{Symbol, Any}</code>: Track any parameters used for later evaluations. Keys must be Symbols.</p></li><li><p><code>judge_template::Symbol</code>: The template symbol for the AI model used to judge the answer. Defaults to <code>:RAGJudgeAnswerFromContext</code>.</p></li><li><p><code>model_judge::AbstractString</code>: The AI model used for judging the answer&#39;s quality. Defaults to standard chat model, but it is advisable to use more powerful model GPT-4.</p></li><li><p><code>api_kwargs::NamedTuple</code>: Parameters that will be forwarded to the API endpoint.</p></li></ul><p><strong>Returns</strong></p><p><code>QAEvalResult</code>: An evaluation result that includes various scores and metadata related to the QA evaluation.</p><p><strong>Notes</strong></p><ul><li><p>The function computes a retrieval score and rank based on how well the context matches the QA context.</p></li><li><p>It then uses the <code>judge_template</code> and <code>model_judge</code> to score the answer&#39;s accuracy and relevance.</p></li><li><p>In case of errors during evaluation, the function logs a warning (if <code>verbose</code> is <code>true</code>) and the <code>answer_score</code> will be set to <code>nothing</code>.</p></li></ul><p><strong>Examples</strong></p><p>Evaluating a QA pair using a specific context and model:</p><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">qa_item </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> QAEvalItem</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(question</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;What is the capital of France?&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, answer</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Paris&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, context</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;France is a country in Europe.&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ctx </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> RAGDetails</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(source</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Wikipedia&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, context</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;France is a country in Europe.&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, answer</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Paris&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">parameters_dict </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> Dict</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;param1&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =&gt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;value1&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;param2&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =&gt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;value2&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">eval_result </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> run_qa_evals</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(qa_item, ctx, parameters_dict</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">parameters_dict, model_judge</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;MyAIJudgeModel&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p><a href="https://github.com/svilupp/PromptingTools.jl/blob/db7410f2de9c925fe77707c036c0f660b77c876b/src/Experimental/RAGTools/evaluation.jl#L145-L181" target="_blank" rel="noreferrer">source</a></p></div><br><div style="border-width:1px;border-style:solid;border-color:black;padding:1em;border-radius:25px;"><a id="PromptingTools.Experimental.RAGTools.score_retrieval_hit-Tuple{AbstractString, Vector{&lt;:AbstractString}}" href="#PromptingTools.Experimental.RAGTools.score_retrieval_hit-Tuple{AbstractString, Vector{&lt;:AbstractString}}">#</a> <b><u>PromptingTools.Experimental.RAGTools.score_retrieval_hit</u></b> — <i>Method</i>. <p>Returns 1.0 if <code>context</code> overlaps or is contained within any of the <code>candidate_context</code></p><p><a href="https://github.com/svilupp/PromptingTools.jl/blob/db7410f2de9c925fe77707c036c0f660b77c876b/src/Experimental/RAGTools/evaluation.jl#L131" target="_blank" rel="noreferrer">source</a></p></div><br><div style="border-width:1px;border-style:solid;border-color:black;padding:1em;border-radius:25px;"><a id="PromptingTools.Experimental.RAGTools.score_retrieval_rank-Tuple{AbstractString, Vector{&lt;:AbstractString}}" href="#PromptingTools.Experimental.RAGTools.score_retrieval_rank-Tuple{AbstractString, Vector{&lt;:AbstractString}}">#</a> <b><u>PromptingTools.Experimental.RAGTools.score_retrieval_rank</u></b> — <i>Method</i>. <p>Returns Integer rank of the position where <code>context</code> overlaps or is contained within a <code>candidate_context</code></p><p><a href="https://github.com/svilupp/PromptingTools.jl/blob/db7410f2de9c925fe77707c036c0f660b77c876b/src/Experimental/RAGTools/evaluation.jl#L138" target="_blank" rel="noreferrer">source</a></p></div><br><div style="border-width:1px;border-style:solid;border-color:black;padding:1em;border-radius:25px;"><a id="PromptingTools.Experimental.RAGTools.set_node_style!-Tuple{PromptingTools.Experimental.RAGTools.TrigramAnnotater, PromptingTools.Experimental.RAGTools.AnnotatedNode}" href="#PromptingTools.Experimental.RAGTools.set_node_style!-Tuple{PromptingTools.Experimental.RAGTools.TrigramAnnotater, PromptingTools.Experimental.RAGTools.AnnotatedNode}">#</a> <b><u>PromptingTools.Experimental.RAGTools.set_node_style!</u></b> — <i>Method</i>. <div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">set_node_style!</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">TrigramAnnotater</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, node</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">AnnotatedNode</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    low_threshold</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Float64</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0.0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, medium_threshold</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Float64</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0.5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, high_threshold</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Float64</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1.0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    low_styler</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Styler</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> Styler</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(color </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> :magenta</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, bold </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> false</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    medium_styler</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Styler</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> Styler</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(color </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> :blue</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, bold </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> false</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    high_styler</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Styler</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> Styler</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(color </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> :nothing</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, bold </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> false</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    bold_multihits</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Bool</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> false</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Sets style of <code>node</code> based on the provided rules</p><p><a href="https://github.com/svilupp/PromptingTools.jl/blob/db7410f2de9c925fe77707c036c0f660b77c876b/src/Experimental/RAGTools/annotation.jl#L142-L151" target="_blank" rel="noreferrer">source</a></p></div><br><div style="border-width:1px;border-style:solid;border-color:black;padding:1em;border-radius:25px;"><a id="PromptingTools.Experimental.RAGTools.split_into_code_and_sentences-Tuple{Union{SubString{String}, String}}" href="#PromptingTools.Experimental.RAGTools.split_into_code_and_sentences-Tuple{Union{SubString{String}, String}}">#</a> <b><u>PromptingTools.Experimental.RAGTools.split_into_code_and_sentences</u></b> — <i>Method</i>. <div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">split_into_code_and_sentences</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(input</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Union{String, SubString{String}}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Splits text block into code or text and sub-splits into units.</p><p>If code block, it splits by newline but keep the <code>group_id</code> the same (to have the same source) If text block, splits into sentences, bullets, etc., provides different <code>group_id</code> (to have different source)</p><p><a href="https://github.com/svilupp/PromptingTools.jl/blob/db7410f2de9c925fe77707c036c0f660b77c876b/src/Experimental/RAGTools/utils.jl#L193-L200" target="_blank" rel="noreferrer">source</a></p></div><br><div style="border-width:1px;border-style:solid;border-color:black;padding:1em;border-radius:25px;"><a id="PromptingTools.Experimental.RAGTools.token_with_boundaries-Tuple{Union{Nothing, AbstractString}, AbstractString, Union{Nothing, AbstractString}}" href="#PromptingTools.Experimental.RAGTools.token_with_boundaries-Tuple{Union{Nothing, AbstractString}, AbstractString, Union{Nothing, AbstractString}}">#</a> <b><u>PromptingTools.Experimental.RAGTools.token_with_boundaries</u></b> — <i>Method</i>. <div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">token_with_boundaries</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    prev_token</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Union{Nothing, AbstractString}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, curr_token</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">AbstractString</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    next_token</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Union{Nothing, AbstractString}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Joins the three tokens together. Useful to add boundary tokens (like spaces vs brackets) to the <code>curr_token</code> to improve the matched context (ie, separate partial matches from exact match)</p><p><a href="https://github.com/svilupp/PromptingTools.jl/blob/db7410f2de9c925fe77707c036c0f660b77c876b/src/Experimental/RAGTools/utils.jl#L113-L119" target="_blank" rel="noreferrer">source</a></p></div><br><div style="border-width:1px;border-style:solid;border-color:black;padding:1em;border-radius:25px;"><a id="PromptingTools.Experimental.RAGTools.tokenize-Tuple{Union{SubString{String}, String}}" href="#PromptingTools.Experimental.RAGTools.tokenize-Tuple{Union{SubString{String}, String}}">#</a> <b><u>PromptingTools.Experimental.RAGTools.tokenize</u></b> — <i>Method</i>. <div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">tokenize</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(input</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Union{String, SubString{String}}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Tokenizes provided <code>input</code> by spaces, special characters or Julia symbols (eg, <code>=&gt;</code>).</p><p>Unlike other tokenizers, it aims to lossless - ie, keep both the separated text and the separators.</p><p><a href="https://github.com/svilupp/PromptingTools.jl/blob/db7410f2de9c925fe77707c036c0f660b77c876b/src/Experimental/RAGTools/utils.jl#L39-L45" target="_blank" rel="noreferrer">source</a></p></div><br><div style="border-width:1px;border-style:solid;border-color:black;padding:1em;border-radius:25px;"><a id="PromptingTools.Experimental.RAGTools.trigram_support!-Union{Tuple{F2}, Tuple{F1}, Tuple{PromptingTools.Experimental.RAGTools.AnnotatedNode, AbstractVector}, Tuple{PromptingTools.Experimental.RAGTools.AnnotatedNode, AbstractVector, F1}, Tuple{PromptingTools.Experimental.RAGTools.AnnotatedNode, AbstractVector, F1, F2}} where {F1&lt;:Function, F2&lt;:Function}" href="#PromptingTools.Experimental.RAGTools.trigram_support!-Union{Tuple{F2}, Tuple{F1}, Tuple{PromptingTools.Experimental.RAGTools.AnnotatedNode, AbstractVector}, Tuple{PromptingTools.Experimental.RAGTools.AnnotatedNode, AbstractVector, F1}, Tuple{PromptingTools.Experimental.RAGTools.AnnotatedNode, AbstractVector, F1, F2}} where {F1&lt;:Function, F2&lt;:Function}">#</a> <b><u>PromptingTools.Experimental.RAGTools.trigram_support!</u></b> — <i>Method</i>. <div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">trigram_support!</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(parent_node</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">AnnotatedNode</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    context_trigrams</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">AbstractVector</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, trigram_func</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">F1</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> trigrams, token_transform</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">F2</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> identity;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    skip_trigrams</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Bool</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> false</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, min_score</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Float64</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0.5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    min_source_score</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Float64</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0.25</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    stop_words</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">AbstractVector{&lt;:String}</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> STOPWORDS,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    styler_kwargs</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">...</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">where</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {F1 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> Function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, F2 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> Function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>Find if the <code>parent_node.content</code> is supported by the provided <code>context_trigrams</code>.</p><p>Logic:</p><ul><li><p>Split the <code>parent_node.content</code> into tokens</p></li><li><p>Create an <code>AnnotatedNode</code> for each token</p></li><li><p>If <code>skip_trigrams</code> is enabled, it looks for an exact match in the <code>context_trigrams</code></p></li><li><p>If no exact match found, it counts trigram-based match (include the surrounding tokens for better contextual awareness) as a score</p></li><li><p>Then it sets the style of the node based on the score</p></li><li><p>Lastly, it aligns the styles of neighboring nodes with <code>score==nothing</code> (eg, single character tokens)</p></li><li><p>Then, it rolls up the scores and sources to the parent node</p></li></ul><p>For diagnostics, you can use <code>AbstractTrees.print_tree(parent_node)</code> to see the tree structure of each token and its score.</p><p><strong>Example</strong></p><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">node </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> AnnotatedNode</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(content </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;xyz&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)  </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">trigram_support!</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(node, context_trigrams) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># updates node.children! \`\`\`</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[source](https</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">://</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">github</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">com</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">svilupp</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">PromptingTools</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">jl</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">blob</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">db7410f2de9c925fe77707c036c0f660b77c876b</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">src</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Experimental</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">RAGTools</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">annotation</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">jl</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">#L200-L229)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">div</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">br</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">div style</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;border-width:1px; border-style:solid; border-color:black; padding: 1em; border-radius: 25px;&#39;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">a id</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;PromptingTools.Experimental.RAGTools.trigrams-Tuple{AbstractString}&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> href</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;#PromptingTools.Experimental.RAGTools.trigrams-Tuple{AbstractString}&#39;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">#&lt;/a&gt;&amp;nbsp;&lt;b&gt;&lt;u&gt;PromptingTools.Experimental.RAGTools.trigrams&lt;/u&gt;&lt;/b&gt; &amp;mdash; &lt;i&gt;Method&lt;/i&gt;.</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">\`\`\`julia</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">trigrams(input_string::AbstractString; add_word::AbstractString = &quot;&quot;)</span></span></code></pre></div><p>Splits provided <code>input_string</code> into a vector of trigrams (combination of three consecutive characters found in the <code>input_string</code>).</p><p>If <code>add_word</code> is provided, it is added to the resulting array. Useful to add the full word itself to the resulting array for exact match.</p><p><a href="https://github.com/svilupp/PromptingTools.jl/blob/db7410f2de9c925fe77707c036c0f660b77c876b/src/Experimental/RAGTools/utils.jl#L51-L57" target="_blank" rel="noreferrer">source</a></p></div><br><div style="border-width:1px;border-style:solid;border-color:black;padding:1em;border-radius:25px;"><a id="PromptingTools.Experimental.RAGTools.trigrams_hashed-Tuple{AbstractString}" href="#PromptingTools.Experimental.RAGTools.trigrams_hashed-Tuple{AbstractString}">#</a> <b><u>PromptingTools.Experimental.RAGTools.trigrams_hashed</u></b> — <i>Method</i>. <div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">trigrams_hashed</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(input_string</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">AbstractString</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; add_word</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">AbstractString</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Splits provided <code>input_string</code> into a Set of hashed trigrams (combination of three consecutive characters found in the <code>input_string</code>).</p><p>It is more efficient for lookups in large strings (eg, &gt;100K characters).</p><p>If <code>add_word</code> is provided, it is added to the resulting array to hash. Useful to add the full word itself to the resulting array for exact match.</p><p><a href="https://github.com/svilupp/PromptingTools.jl/blob/db7410f2de9c925fe77707c036c0f660b77c876b/src/Experimental/RAGTools/utils.jl#L81-L89" target="_blank" rel="noreferrer">source</a></p></div><br><div style="border-width:1px;border-style:solid;border-color:black;padding:1em;border-radius:25px;"><a id="PromptingTools.pprint-Tuple{IO, PromptingTools.Experimental.RAGTools.AbstractAnnotatedNode}" href="#PromptingTools.pprint-Tuple{IO, PromptingTools.Experimental.RAGTools.AbstractAnnotatedNode}">#</a> <b><u>PromptingTools.pprint</u></b> — <i>Method</i>. <div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">PromptingTools</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">pprint</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    io</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">IO</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, node</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">AbstractAnnotatedNode</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; text_width</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Int</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> displaysize</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(io)[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">])</span></span></code></pre></div><p>Pretty print the <code>node</code> to the <code>io</code> stream, including all its children</p><p><a href="https://github.com/svilupp/PromptingTools.jl/blob/db7410f2de9c925fe77707c036c0f660b77c876b/src/Experimental/RAGTools/annotation.jl#L101-L106" target="_blank" rel="noreferrer">source</a></p></div><br>`,78),l=[n];function o(p,r,h,d,k,c){return a(),i("div",null,l)}const u=s(t,[["render",o]]);export{E as __pageData,u as default};
