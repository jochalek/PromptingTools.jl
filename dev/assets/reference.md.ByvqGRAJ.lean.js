import{_ as n,c as l,m as s,a as i,t,a7 as a,o as p}from"./chunks/framework.BqXtT0r6.js";const Ps=JSON.parse('{"title":"Reference","description":"","frontmatter":{"outline":"deep"},"headers":[],"relativePath":"reference.md","filePath":"reference.md","lastUpdated":null}'),o={name:"reference.md"},h=a("",78),r={style:{"border-width":"1px","border-style":"solid","border-color":"black",padding:"1em","border-radius":"25px"}},d=s("a",{id:'PromptingTools.aiclassify-Union{Tuple{T}, Tuple{PromptingTools.AbstractOpenAISchema, Union{AbstractString, PromptingTools.AbstractMessage, Vector{<:PromptingTools.AbstractMessage}}}} where T<:Union{AbstractString, Tuple{var"#s110", var"#s104"} where {var"#s110"<:AbstractString, var"#s104"<:AbstractString}}',href:'#PromptingTools.aiclassify-Union{Tuple{T}, Tuple{PromptingTools.AbstractOpenAISchema, Union{AbstractString, PromptingTools.AbstractMessage, Vector{<:PromptingTools.AbstractMessage}}}} where T<:Union{AbstractString, Tuple{var"#s110", var"#s104"} where {var"#s110"<:AbstractString, var"#s104"<:AbstractString}}'},"#",-1),k=s("b",null,[s("u",null,"PromptingTools.aiclassify")],-1),c=s("i",null,"Method",-1),g=a("",3),E=s("code",null,"choices",-1),u=a("",19),y=a("",37),m={style:{"border-width":"1px","border-style":"solid","border-color":"black",padding:"1em","border-radius":"25px"}},b=s("a",{id:"PromptingTools.create_template-Tuple{AbstractString, AbstractString}",href:"#PromptingTools.create_template-Tuple{AbstractString, AbstractString}"},"#",-1),F=s("b",null,[s("u",null,"PromptingTools.create_template")],-1),A=s("i",null,"Method",-1),f=a("",4),T=s("code",null,"kwargs",-1),C=a("",18),v=s("p",null,[s("strong",null,"you can now use it like any other template")],-1),_=s("p",null,'aiextract(:GreatingPirate; name="Jack Sparrow") ````',-1),D=s("p",null,[s("a",{href:"https://github.com/svilupp/PromptingTools.jl/blob/b0dab967810f8fb0d80d876cd1ba199d43c88378/src/templates.jl#L377-L458",target:"_blank",rel:"noreferrer"},"source")],-1),P=a("",23),B=s("div",{style:{"border-width":"1px","border-style":"solid","border-color":"black",padding:"1em","border-radius":"25px"}},[s("a",{id:"PromptingTools.function_call_signature-Tuple{Type}",href:"#PromptingTools.function_call_signature-Tuple{Type}"},"#"),i(" "),s("b",null,[s("u",null,"PromptingTools.function_call_signature")]),i(" — "),s("i",null,"Method"),i(". "),s("div",{class:"language-julia vp-adaptive-theme"},[s("button",{title:"Copy Code",class:"copy"}),s("span",{class:"lang"},"julia"),s("pre",{class:"shiki shiki-themes github-light github-dark vp-code"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#005CC5","--shiki-dark":"#79B8FF"}},"function_call_signature"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"(datastructtype"),s("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"::"),s("span",{style:{"--shiki-light":"#005CC5","--shiki-dark":"#79B8FF"}},"Struct"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"; max_description_length"),s("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"::"),s("span",{style:{"--shiki-light":"#005CC5","--shiki-dark":"#79B8FF"}},"Int"),s("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}}," ="),s("span",{style:{"--shiki-light":"#005CC5","--shiki-dark":"#79B8FF"}}," 100"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},")")])])])]),s("p",null,"Extract the argument names, types and docstrings from a struct to create the function call signature in JSON schema."),s("p",null,"You must provide a Struct type (not an instance of it) with some fields."),s("p",null,"Note: Fairly experimental, but works for combination of structs, arrays, strings and singletons."),s("p",null,[s("strong",null,"Tips")]),s("ul",null,[s("li",null,"You can improve the quality of the extraction by writing a helpful docstring for your struct (or any nested struct). It will be provided as a description.")]),s("p",null,"You can even include comments/descriptions about the individual fields."),s("ul",null,[s("li",null,[s("p",null,[i("All fields are assumed to be required, unless you allow null values (eg, "),s("code",null,"::Union{Nothing, Int}"),i("). Fields with "),s("code",null,"Nothing"),i(" will be treated as optional.")])]),s("li",null,[s("p",null,[i("Missing values are ignored (eg, "),s("code",null,"::Union{Missing, Int}"),i(" will be treated as Int). It's for broader compatibility and we cannot deserialize it as easily as "),s("code",null,"Nothing"),i(".")])])]),s("p",null,[s("strong",null,"Example")]),s("p",null,[i("Do you want to extract some specific measurements from a text like age, weight and height? You need to define the information you need as a struct ("),s("code",null,"return_type"),i("):")]),s("div",{class:"language- vp-adaptive-theme"},[s("button",{title:"Copy Code",class:"copy"}),s("span",{class:"lang"}),s("pre",{class:"shiki shiki-themes github-light github-dark vp-code"},[s("code",null,[s("span",{class:"line"},[s("span",null,"struct MyMeasurement")]),i(`
`),s("span",{class:"line"},[s("span",null,"    age::Int")]),i(`
`),s("span",{class:"line"},[s("span",null,"    height::Union{Int,Nothing}")]),i(`
`),s("span",{class:"line"},[s("span",null,"    weight::Union{Nothing,Float64}")]),i(`
`),s("span",{class:"line"},[s("span",null,"end")]),i(`
`),s("span",{class:"line"},[s("span",null,"signature = function_call_signature(MyMeasurement)")]),i(`
`),s("span",{class:"line"},[s("span",null,"#")]),i(`
`),s("span",{class:"line"},[s("span",null,"# Dict{String, Any} with 3 entries:")]),i(`
`),s("span",{class:"line"},[s("span",null,'#   "name"        => "MyMeasurement_extractor"')]),i(`
`),s("span",{class:"line"},[s("span",null,'#   "parameters"  => Dict{String, Any}("properties"=>Dict{String, Any}("height"=>Dict{String, Any}("type"=>"integer"), "weight"=>Dic…')]),i(`
`),s("span",{class:"line"},[s("span",null,`#   "description" => "Represents person's age, height, and weight`)]),i(`
`),s("span",{class:"line"},[s("span",null,'"')])])])]),s("p",null,[i("You can see that only the field "),s("code",null,"age"),i(` does not allow null values, hence, it's "required". While `),s("code",null,"height"),i(" and "),s("code",null,"weight"),i(" are optional.")]),s("div",{class:"language- vp-adaptive-theme"},[s("button",{title:"Copy Code",class:"copy"}),s("span",{class:"lang"}),s("pre",{class:"shiki shiki-themes github-light github-dark vp-code"},[s("code",null,[s("span",{class:"line"},[s("span",null,'signature["parameters"]["required"]')]),i(`
`),s("span",{class:"line"},[s("span",null,'# ["age"]')])])])]),s("p",null,[i("If there are multiple items you want to extract, define a wrapper struct to get a Vector of "),s("code",null,"MyMeasurement"),i(":")]),s("div",{class:"language- vp-adaptive-theme"},[s("button",{title:"Copy Code",class:"copy"}),s("span",{class:"lang"}),s("pre",{class:"shiki shiki-themes github-light github-dark vp-code"},[s("code",null,[s("span",{class:"line"},[s("span",null,"struct MyMeasurementWrapper")]),i(`
`),s("span",{class:"line"},[s("span",null,"    measurements::Vector{MyMeasurement}")]),i(`
`),s("span",{class:"line"},[s("span",null,"end")]),i(`
`),s("span",{class:"line"},[s("span")]),i(`
`),s("span",{class:"line"},[s("span",null,"Or if you want your extraction to fail gracefully when data isn't found, use `MaybeExtract{T}` wrapper (inspired by Instructor package!):")])])])]),s("p",null,"using PromptingTools: MaybeExtract"),s("p",{MyMeasurement:""},"type = MaybeExtract"),s("p",null,[s("strong",null,"Effectively the same as:")]),s("p",null,[s("strong",null,"struct MaybeExtract{T}")]),s("p",null,[s("strong",null,"result::Union{T, Nothing}")]),s("p",null,[s("strong",null,"error::Bool // true if a result is found, false otherwise")]),s("p",null,[s("strong",null,"message::Union{Nothing, String} // Only present if no result is found, should be short and concise")]),s("p",null,[s("strong",null,"end")]),s("p",null,[s("strong",null,[i("If LLM extraction fails, it will return a Dict with "),s("code",null,"error"),i(" and "),s("code",null,"message"),i(" fields instead of the result!")])]),s("p",null,'msg = aiextract("Extract measurements from the text: I am giraffe", type)'),s("hr"),s("p",null,[s("strong",null,"Dict{Symbol, Any} with 2 entries:")]),s("p",null,[s("strong",null,':message => "Sorry, this feature is only available for humans."')]),s("p",null,[s("strong",null,":error => true")]),s("div",{class:"language-That vp-adaptive-theme"},[s("button",{title:"Copy Code",class:"copy"}),s("span",{class:"lang"},"That"),s("pre",{class:"shiki shiki-themes github-light github-dark vp-code"},[s("code",null,[s("span",{class:"line"},[s("span")]),i(`
`),s("span",{class:"line"},[s("span")]),i(`
`),s("span",{class:"line"},[s("span",null,"[source](https://github.com/svilupp/PromptingTools.jl/blob/b0dab967810f8fb0d80d876cd1ba199d43c88378/src/extraction.jl#L84-L152)")]),i(`
`),s("span",{class:"line"},[s("span")]),i(`
`),s("span",{class:"line"},[s("span",null,"</div>")]),i(`
`),s("span",{class:"line"},[s("span",null,"<br>")]),i(`
`),s("span",{class:"line"},[s("span",null,"<div style='border-width:1px; border-style:solid; border-color:black; padding: 1em; border-radius: 25px;'>")]),i(`
`),s("span",{class:"line"},[s("span",null,"<a id='PromptingTools.get_preferences-Tuple{String}' href='#PromptingTools.get_preferences-Tuple{String}'>#</a>&nbsp;<b><u>PromptingTools.get_preferences</u></b> &mdash; <i>Method</i>.")]),i(`
`),s("span",{class:"line"},[s("span")]),i(`
`),s("span",{class:"line"},[s("span")]),i(`
`),s("span",{class:"line"},[s("span")]),i(`
`),s("span",{class:"line"},[s("span")]),i(`
`),s("span",{class:"line"},[s("span",null,"```julia")]),i(`
`),s("span",{class:"line"},[s("span",null,"get_preferences(key::String)")])])])]),s("p",null,[i("Get preferences for PromptingTools. See "),s("code",null,"?PREFERENCES"),i(" for more information.")]),s("p",null,[i("See also: "),s("code",null,"set_preferences!")]),s("p",null,[s("strong",null,"Example")]),s("div",{class:"language-julia vp-adaptive-theme"},[s("button",{title:"Copy Code",class:"copy"}),s("span",{class:"lang"},"julia"),s("pre",{class:"shiki shiki-themes github-light github-dark vp-code"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"PromptingTools"),s("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"."),s("span",{style:{"--shiki-light":"#005CC5","--shiki-dark":"#79B8FF"}},"get_preferences"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"("),s("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},'"MODEL_CHAT"'),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},")")])])])]),s("p",null,[s("a",{href:"https://github.com/svilupp/PromptingTools.jl/blob/b0dab967810f8fb0d80d876cd1ba199d43c88378/src/user_preferences.jl#L94-L105",target:"_blank",rel:"noreferrer"},"source")])],-1),S=a("",33),I={style:{"border-width":"1px","border-style":"solid","border-color":"black",padding:"1em","border-radius":"25px"}},q=s("a",{id:"PromptingTools.render-Tuple{PromptingTools.AbstractGoogleSchema, Vector{<:PromptingTools.AbstractMessage}}",href:"#PromptingTools.render-Tuple{PromptingTools.AbstractGoogleSchema, Vector{<:PromptingTools.AbstractMessage}}"},"#",-1),w=s("b",null,[s("u",null,"PromptingTools.render")],-1),x=s("i",null,"Method",-1),M=a("",1),j=s("p",null,[s("strong",null,"Keyword Arguments")],-1),O=s("ul",null,[s("li",null,[s("code",null,"conversation"),i(": An optional vector of "),s("code",null,"AbstractMessage"),i(" objects representing the conversation history. If not provided, it is initialized as an empty vector.")])],-1),L=s("p",null,[s("a",{href:"https://github.com/svilupp/PromptingTools.jl/blob/b0dab967810f8fb0d80d876cd1ba199d43c88378/src/llm_google.jl#L2-L13",target:"_blank",rel:"noreferrer"},"source")],-1),R=s("br",null,null,-1),N={style:{"border-width":"1px","border-style":"solid","border-color":"black",padding:"1em","border-radius":"25px"}},V=s("a",{id:"PromptingTools.render-Tuple{PromptingTools.AbstractOllamaManagedSchema, Vector{<:PromptingTools.AbstractMessage}}",href:"#PromptingTools.render-Tuple{PromptingTools.AbstractOllamaManagedSchema, Vector{<:PromptingTools.AbstractMessage}}"},"#",-1),U=s("b",null,[s("u",null,"PromptingTools.render")],-1),G=s("i",null,"Method",-1),Y=a("",1),H=s("p",null,[i('Note: Due to its "managed" nature, at most 2 messages can be provided ('),s("code",null,"system"),i(" and "),s("code",null,"prompt"),i(" inputs in the API).")],-1),W=s("p",null,[s("strong",null,"Keyword Arguments")],-1),z=s("ul",null,[s("li",null,[s("code",null,"conversation"),i(": Not allowed for this schema. Provided only for compatibility.")])],-1),J=s("p",null,[s("a",{href:"https://github.com/svilupp/PromptingTools.jl/blob/b0dab967810f8fb0d80d876cd1ba199d43c88378/src/llm_ollama_managed.jl#L9-L21",target:"_blank",rel:"noreferrer"},"source")],-1),K=s("br",null,null,-1),$={style:{"border-width":"1px","border-style":"solid","border-color":"black",padding:"1em","border-radius":"25px"}},Q=s("a",{id:"PromptingTools.render-Tuple{PromptingTools.AbstractOllamaSchema, Vector{<:PromptingTools.AbstractMessage}}",href:"#PromptingTools.render-Tuple{PromptingTools.AbstractOllamaSchema, Vector{<:PromptingTools.AbstractMessage}}"},"#",-1),X=s("b",null,[s("u",null,"PromptingTools.render")],-1),Z=s("i",null,"Method",-1),ss=a("",1),is=s("p",null,[s("strong",null,"Keyword Arguments")],-1),as=s("ul",null,[s("li",null,[s("code",null,"conversation"),i(": An optional vector of "),s("code",null,"AbstractMessage"),i(" objects representing the conversation history. If not provided, it is initialized as an empty vector.")])],-1),es=s("p",null,[s("a",{href:"https://github.com/svilupp/PromptingTools.jl/blob/b0dab967810f8fb0d80d876cd1ba199d43c88378/src/llm_ollama.jl#L10-L21",target:"_blank",rel:"noreferrer"},"source")],-1),ts=s("br",null,null,-1),ns={style:{"border-width":"1px","border-style":"solid","border-color":"black",padding:"1em","border-radius":"25px"}},ls=s("a",{id:"PromptingTools.render-Tuple{PromptingTools.AbstractOpenAISchema, Vector{<:PromptingTools.AbstractMessage}}",href:"#PromptingTools.render-Tuple{PromptingTools.AbstractOpenAISchema, Vector{<:PromptingTools.AbstractMessage}}"},"#",-1),ps=s("b",null,[s("u",null,"PromptingTools.render")],-1),os=s("i",null,"Method",-1),hs=a("",1),rs=a("",3),ds=s("br",null,null,-1),ks={style:{"border-width":"1px","border-style":"solid","border-color":"black",padding:"1em","border-radius":"25px"}},cs=s("a",{id:"PromptingTools.render-Tuple{PromptingTools.NoSchema, Vector{<:PromptingTools.AbstractMessage}}",href:"#PromptingTools.render-Tuple{PromptingTools.NoSchema, Vector{<:PromptingTools.AbstractMessage}}"},"#",-1),gs=s("b",null,[s("u",null,"PromptingTools.render")],-1),Es=s("i",null,"Method",-1),us=a("",6),ys=s("li",null,[s("p",null,"If a SystemMessage is missing, we inject a default one at the beginning of the conversation.")],-1),ms=s("li",null,[s("p",null,"Only one SystemMessage is allowed (ie, cannot mix two conversations different system prompts).")],-1),bs=s("p",null,[s("a",{href:"https://github.com/svilupp/PromptingTools.jl/blob/b0dab967810f8fb0d80d876cd1ba199d43c88378/src/llm_shared.jl#L2-L20",target:"_blank",rel:"noreferrer"},"source")],-1),Fs=a("",25);function As(e,fs,Ts,Cs,vs,_s){return p(),l("div",null,[h,s("div",r,[d,i(" "),k,i(" — "),c,i(". "),g,s("p",null,[i("!!! Note: The prompt/AITemplate must have a placeholder "),E,i(" (ie, "),s("code",null,t(e.choices),1),i(") that will be replaced with the encoded choices")]),u]),y,s("div",m,[b,i(" "),F,i(" — "),A,i(". "),f,s("p",null,[i("Use double handlebar placeholders (eg, "),s("code",null,t(e.name),1),i(") to define variables that can be replaced by the "),T,i(" during the AI call (see example).")]),C,s("p",null,'tpl=PT.create_template("You must speak like a pirate", "Say hi to '+t(e.name)+'"; load_as="GreatingPirate")',1),v,_,D]),P,B,S,s("div",I,[q,i(" "),w,i(" — "),x,i(". "),M,s("p",null,[i("Builds a history of the conversation to provide the prompt to the API. All unspecified kwargs are passed as replacements such that "),s("code",null,t(e.key)+"=>value",1),i(" in the template.")]),j,O,L]),R,s("div",N,[V,i(" "),U,i(" — "),G,i(". "),Y,s("p",null,[i("Builds a history of the conversation to provide the prompt to the API. All unspecified kwargs are passed as replacements such that "),s("code",null,t(e.key)+"=>value",1),i(" in the template.")]),H,W,z,J]),K,s("div",$,[Q,i(" "),X,i(" — "),Z,i(". "),ss,s("p",null,[i("Builds a history of the conversation to provide the prompt to the API. All unspecified kwargs are passed as replacements such that "),s("code",null,t(e.key)+"=>value",1),i(" in the template.")]),is,as,es]),ts,s("div",ns,[ls,i(" "),ps,i(" — "),os,i(". "),hs,s("p",null,[i("Builds a history of the conversation to provide the prompt to the API. All unspecified kwargs are passed as replacements such that "),s("code",null,t(e.key)+"=>value",1),i(" in the template.")]),rs]),ds,s("div",ks,[cs,i(" "),gs,i(" — "),Es,i(". "),us,s("ul",null,[s("li",null,[s("p",null,[i("All unspecified kwargs are passed as replacements such that "),s("code",null,t(e.key)+"=>value",1),i(" in the template.")])]),ys,ms]),bs]),Fs])}const Bs=n(o,[["render",As]]);export{Ps as __pageData,Bs as default};
